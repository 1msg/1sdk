/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SendTemplateRequestAllOfDateTimeComponent
    /// </summary>
    [DataContract(Name = "SendTemplateRequest_allOf_date_time_component")]
    public partial class SendTemplateRequestAllOfDateTimeComponent : IEquatable<SendTemplateRequestAllOfDateTimeComponent>, IValidatableObject
    {
        /// <summary>
        /// Defines DayOfWeek
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DayOfWeekEnum
        {
            /// <summary>
            /// Enum MONDAY for value: MONDAY
            /// </summary>
            [EnumMember(Value = "MONDAY")]
            MONDAY = 1,

            /// <summary>
            /// Enum TUESDAY for value: TUESDAY
            /// </summary>
            [EnumMember(Value = "TUESDAY")]
            TUESDAY = 2,

            /// <summary>
            /// Enum WEDNESDAY for value: WEDNESDAY
            /// </summary>
            [EnumMember(Value = "WEDNESDAY")]
            WEDNESDAY = 3,

            /// <summary>
            /// Enum THURSDAY for value: THURSDAY
            /// </summary>
            [EnumMember(Value = "THURSDAY")]
            THURSDAY = 4,

            /// <summary>
            /// Enum FRIDAY for value: FRIDAY
            /// </summary>
            [EnumMember(Value = "FRIDAY")]
            FRIDAY = 5,

            /// <summary>
            /// Enum SATURDAY for value: SATURDAY
            /// </summary>
            [EnumMember(Value = "SATURDAY")]
            SATURDAY = 6,

            /// <summary>
            /// Enum SUNDAY for value: SUNDAY
            /// </summary>
            [EnumMember(Value = "SUNDAY")]
            SUNDAY = 7,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 8,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 9,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 10,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 11,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 12,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 13,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 14
        }


        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        /// <example>FRIDAY</example>
        [DataMember(Name = "day_of_week", EmitDefaultValue = false)]
        public DayOfWeekEnum? DayOfWeek { get; set; }
        /// <summary>
        /// Defines Calendar
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CalendarEnum
        {
            /// <summary>
            /// Enum GREGORIAN for value: GREGORIAN
            /// </summary>
            [EnumMember(Value = "GREGORIAN")]
            GREGORIAN = 1,

            /// <summary>
            /// Enum SOLARHIJRI for value: SOLAR_HIJRI
            /// </summary>
            [EnumMember(Value = "SOLAR_HIJRI")]
            SOLARHIJRI = 2
        }


        /// <summary>
        /// Gets or Sets Calendar
        /// </summary>
        /// <example>GREGORIAN</example>
        [DataMember(Name = "calendar", EmitDefaultValue = false)]
        public CalendarEnum? Calendar { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendTemplateRequestAllOfDateTimeComponent" /> class.
        /// </summary>
        /// <param name="dayOfWeek">dayOfWeek.</param>
        /// <param name="year">year.</param>
        /// <param name="month">month.</param>
        /// <param name="dayOfMonth">dayOfMonth.</param>
        /// <param name="hour">hour.</param>
        /// <param name="minute">minute.</param>
        /// <param name="calendar">calendar.</param>
        public SendTemplateRequestAllOfDateTimeComponent(DayOfWeekEnum? dayOfWeek = default(DayOfWeekEnum?), int year = default(int), int month = default(int), int dayOfMonth = default(int), int hour = default(int), int minute = default(int), CalendarEnum? calendar = default(CalendarEnum?))
        {
            this.DayOfWeek = dayOfWeek;
            this.Year = year;
            this.Month = month;
            this.DayOfMonth = dayOfMonth;
            this.Hour = hour;
            this.Minute = minute;
            this.Calendar = calendar;
        }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        /// <example>2001</example>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        /// <example>4</example>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// Gets or Sets DayOfMonth
        /// </summary>
        /// <example>13</example>
        [DataMember(Name = "day_of_month", EmitDefaultValue = false)]
        public int DayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets Hour
        /// </summary>
        /// <example>17</example>
        [DataMember(Name = "hour", EmitDefaultValue = false)]
        public int Hour { get; set; }

        /// <summary>
        /// Gets or Sets Minute
        /// </summary>
        /// <example>20</example>
        [DataMember(Name = "minute", EmitDefaultValue = false)]
        public int Minute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendTemplateRequestAllOfDateTimeComponent {\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Calendar: ").Append(Calendar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendTemplateRequestAllOfDateTimeComponent);
        }

        /// <summary>
        /// Returns true if SendTemplateRequestAllOfDateTimeComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of SendTemplateRequestAllOfDateTimeComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendTemplateRequestAllOfDateTimeComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    this.DayOfWeek.Equals(input.DayOfWeek)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Month == input.Month ||
                    this.Month.Equals(input.Month)
                ) && 
                (
                    this.DayOfMonth == input.DayOfMonth ||
                    this.DayOfMonth.Equals(input.DayOfMonth)
                ) && 
                (
                    this.Hour == input.Hour ||
                    this.Hour.Equals(input.Hour)
                ) && 
                (
                    this.Minute == input.Minute ||
                    this.Minute.Equals(input.Minute)
                ) && 
                (
                    this.Calendar == input.Calendar ||
                    this.Calendar.Equals(input.Calendar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DayOfWeek.GetHashCode();
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                hashCode = (hashCode * 59) + this.Month.GetHashCode();
                hashCode = (hashCode * 59) + this.DayOfMonth.GetHashCode();
                hashCode = (hashCode * 59) + this.Hour.GetHashCode();
                hashCode = (hashCode * 59) + this.Minute.GetHashCode();
                hashCode = (hashCode * 59) + this.Calendar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
