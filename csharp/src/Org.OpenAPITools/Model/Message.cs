/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Message
    /// </summary>
    [DataContract(Name = "Message")]
    public partial class Message : IEquatable<Message>, IValidatableObject
    {
        /// <summary>
        /// type of the message
        /// </summary>
        /// <value>type of the message</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Chat for value: chat
            /// </summary>
            [EnumMember(Value = "chat")]
            Chat = 1,

            /// <summary>
            /// Enum Interactive for value: interactive
            /// </summary>
            [EnumMember(Value = "interactive")]
            Interactive = 2,

            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            [EnumMember(Value = "image")]
            Image = 3,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 4,

            /// <summary>
            /// Enum Document for value: document
            /// </summary>
            [EnumMember(Value = "document")]
            Document = 5,

            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 6,

            /// <summary>
            /// Enum Sticker for value: sticker
            /// </summary>
            [EnumMember(Value = "sticker")]
            Sticker = 7,

            /// <summary>
            /// Enum Voice for value: voice
            /// </summary>
            [EnumMember(Value = "voice")]
            Voice = 8
        }


        /// <summary>
        /// type of the message
        /// </summary>
        /// <value>type of the message</value>
        /// <example>chat</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="id">unique id.</param>
        /// <param name="body">text message for type \&quot;chat\&quot;, or link to download the file for \&quot;ptt\&quot;, \&quot;image\&quot;, \&quot;audio\&quot;, \&quot;video\&quot; and \&quot;document\&quot;, or latitude and longitude for \&quot;location\&quot;, or message \&quot;[Call]\&quot; for \&quot;call_log\&quot;.</param>
        /// <param name="fromMe">true - outgoing, false - incoming.</param>
        /// <param name="self">1 - generated by api, 0 - generated by app.</param>
        /// <param name="isForwarded">true - forwarded message, false - direct message.</param>
        /// <param name="author">Author ID of the message.</param>
        /// <param name="time">send time, unix timestamp.</param>
        /// <param name="chatId">chat ID.</param>
        /// <param name="type">type of the message.</param>
        /// <param name="senderName">Sender name.</param>
        /// <param name="caption">File caption or filename.</param>
        /// <param name="quotedMsgId">ID of quoted message.</param>
        public Message(string id = default(string), string body = default(string), bool fromMe = default(bool), int self = default(int), bool isForwarded = default(bool), string author = default(string), int time = default(int), string chatId = default(string), TypeEnum? type = default(TypeEnum?), string senderName = default(string), string caption = default(string), string quotedMsgId = default(string))
        {
            this.Id = id;
            this.Body = body;
            this.FromMe = fromMe;
            this.Self = self;
            this.IsForwarded = isForwarded;
            this.Author = author;
            this.Time = time;
            this.ChatId = chatId;
            this.Type = type;
            this.SenderName = senderName;
            this.Caption = caption;
            this.QuotedMsgId = quotedMsgId;
        }

        /// <summary>
        /// unique id
        /// </summary>
        /// <value>unique id</value>
        /// <example>ABGHYoIXMAmY13IKOick9az6QYmt4R</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// text message for type \&quot;chat\&quot;, or link to download the file for \&quot;ptt\&quot;, \&quot;image\&quot;, \&quot;audio\&quot;, \&quot;video\&quot; and \&quot;document\&quot;, or latitude and longitude for \&quot;location\&quot;, or message \&quot;[Call]\&quot; for \&quot;call_log\&quot;
        /// </summary>
        /// <value>text message for type \&quot;chat\&quot;, or link to download the file for \&quot;ptt\&quot;, \&quot;image\&quot;, \&quot;audio\&quot;, \&quot;video\&quot; and \&quot;document\&quot;, or latitude and longitude for \&quot;location\&quot;, or message \&quot;[Call]\&quot; for \&quot;call_log\&quot;</value>
        /// <example>Ok!</example>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// true - outgoing, false - incoming
        /// </summary>
        /// <value>true - outgoing, false - incoming</value>
        /// <example>true</example>
        [DataMember(Name = "fromMe", EmitDefaultValue = true)]
        public bool FromMe { get; set; }

        /// <summary>
        /// 1 - generated by api, 0 - generated by app
        /// </summary>
        /// <value>1 - generated by api, 0 - generated by app</value>
        /// <example>0</example>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public int Self { get; set; }

        /// <summary>
        /// true - forwarded message, false - direct message
        /// </summary>
        /// <value>true - forwarded message, false - direct message</value>
        /// <example>false</example>
        [DataMember(Name = "isForwarded", EmitDefaultValue = true)]
        public bool IsForwarded { get; set; }

        /// <summary>
        /// Author ID of the message
        /// </summary>
        /// <value>Author ID of the message</value>
        /// <example>12020721369@c.us</example>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// send time, unix timestamp
        /// </summary>
        /// <value>send time, unix timestamp</value>
        /// <example>1665396610</example>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public int Time { get; set; }

        /// <summary>
        /// chat ID
        /// </summary>
        /// <value>chat ID</value>
        /// <example>12020721369@c.us</example>
        [DataMember(Name = "chatId", EmitDefaultValue = false)]
        public string ChatId { get; set; }

        /// <summary>
        /// Sender name
        /// </summary>
        /// <value>Sender name</value>
        /// <example>John</example>
        [DataMember(Name = "senderName", EmitDefaultValue = false)]
        public string SenderName { get; set; }

        /// <summary>
        /// File caption or filename
        /// </summary>
        /// <value>File caption or filename</value>
        /// <example>photo.jpg</example>
        [DataMember(Name = "caption", EmitDefaultValue = false)]
        public string Caption { get; set; }

        /// <summary>
        /// ID of quoted message
        /// </summary>
        /// <value>ID of quoted message</value>
        /// <example>ABGHYoIXMAmYTwIKOick9az6QYmt4R</example>
        [DataMember(Name = "quotedMsgId", EmitDefaultValue = false)]
        public string QuotedMsgId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  FromMe: ").Append(FromMe).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  IsForwarded: ").Append(IsForwarded).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ChatId: ").Append(ChatId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  QuotedMsgId: ").Append(QuotedMsgId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Message);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="input">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.FromMe == input.FromMe ||
                    this.FromMe.Equals(input.FromMe)
                ) && 
                (
                    this.Self == input.Self ||
                    this.Self.Equals(input.Self)
                ) && 
                (
                    this.IsForwarded == input.IsForwarded ||
                    this.IsForwarded.Equals(input.IsForwarded)
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.ChatId == input.ChatId ||
                    (this.ChatId != null &&
                    this.ChatId.Equals(input.ChatId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.Caption == input.Caption ||
                    (this.Caption != null &&
                    this.Caption.Equals(input.Caption))
                ) && 
                (
                    this.QuotedMsgId == input.QuotedMsgId ||
                    (this.QuotedMsgId != null &&
                    this.QuotedMsgId.Equals(input.QuotedMsgId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FromMe.GetHashCode();
                hashCode = (hashCode * 59) + this.Self.GetHashCode();
                hashCode = (hashCode * 59) + this.IsForwarded.GetHashCode();
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                if (this.ChatId != null)
                {
                    hashCode = (hashCode * 59) + this.ChatId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.SenderName != null)
                {
                    hashCode = (hashCode * 59) + this.SenderName.GetHashCode();
                }
                if (this.Caption != null)
                {
                    hashCode = (hashCode * 59) + this.Caption.GetHashCode();
                }
                if (this.QuotedMsgId != null)
                {
                    hashCode = (hashCode * 59) + this.QuotedMsgId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
