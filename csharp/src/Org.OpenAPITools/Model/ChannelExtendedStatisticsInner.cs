/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChannelExtendedStatisticsInner
    /// </summary>
    [DataContract(Name = "channelExtendedStatistics_inner")]
    public partial class ChannelExtendedStatisticsInner : IEquatable<ChannelExtendedStatisticsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelExtendedStatisticsInner" /> class.
        /// </summary>
        /// <param name="businessInitiatedPaidQuantity">businessInitiatedPaidQuantity.</param>
        /// <param name="businessInitiatedPrice">businessInitiatedPrice.</param>
        /// <param name="businessInitiatedQuantity">businessInitiatedQuantity.</param>
        /// <param name="freeEntryPoint">freeEntryPoint.</param>
        /// <param name="freeQuantity">freeQuantity.</param>
        /// <param name="freeTier">freeTier.</param>
        /// <param name="paidQuantity">paidQuantity.</param>
        /// <param name="periodDate">periodDate.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="userInitiatedPaidQuantity">userInitiatedPaidQuantity.</param>
        /// <param name="userInitiatedPrice">userInitiatedPrice.</param>
        /// <param name="userInitiatedQuantity">userInitiatedQuantity.</param>
        public ChannelExtendedStatisticsInner(int businessInitiatedPaidQuantity = default(int), decimal businessInitiatedPrice = default(decimal), int businessInitiatedQuantity = default(int), int freeEntryPoint = default(int), int freeQuantity = default(int), int freeTier = default(int), int paidQuantity = default(int), string periodDate = default(string), decimal quantity = default(decimal), decimal totalPrice = default(decimal), int userInitiatedPaidQuantity = default(int), decimal userInitiatedPrice = default(decimal), int userInitiatedQuantity = default(int))
        {
            this.BusinessInitiatedPaidQuantity = businessInitiatedPaidQuantity;
            this.BusinessInitiatedPrice = businessInitiatedPrice;
            this.BusinessInitiatedQuantity = businessInitiatedQuantity;
            this.FreeEntryPoint = freeEntryPoint;
            this.FreeQuantity = freeQuantity;
            this.FreeTier = freeTier;
            this.PaidQuantity = paidQuantity;
            this.PeriodDate = periodDate;
            this.Quantity = quantity;
            this.TotalPrice = totalPrice;
            this.UserInitiatedPaidQuantity = userInitiatedPaidQuantity;
            this.UserInitiatedPrice = userInitiatedPrice;
            this.UserInitiatedQuantity = userInitiatedQuantity;
        }

        /// <summary>
        /// Gets or Sets BusinessInitiatedPaidQuantity
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "business_initiated_paid_quantity", EmitDefaultValue = false)]
        public int BusinessInitiatedPaidQuantity { get; set; }

        /// <summary>
        /// Gets or Sets BusinessInitiatedPrice
        /// </summary>
        /// <example>0.0691</example>
        [DataMember(Name = "business_initiated_price", EmitDefaultValue = false)]
        public decimal BusinessInitiatedPrice { get; set; }

        /// <summary>
        /// Gets or Sets BusinessInitiatedQuantity
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "business_initiated_quantity", EmitDefaultValue = false)]
        public int BusinessInitiatedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets FreeEntryPoint
        /// </summary>
        /// <example>0</example>
        [DataMember(Name = "free_entry_point", EmitDefaultValue = false)]
        public int FreeEntryPoint { get; set; }

        /// <summary>
        /// Gets or Sets FreeQuantity
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "free_quantity", EmitDefaultValue = false)]
        public int FreeQuantity { get; set; }

        /// <summary>
        /// Gets or Sets FreeTier
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "free_tier", EmitDefaultValue = false)]
        public int FreeTier { get; set; }

        /// <summary>
        /// Gets or Sets PaidQuantity
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "paid_quantity", EmitDefaultValue = false)]
        public int PaidQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PeriodDate
        /// </summary>
        /// <example>2022-11-01T00:00:00Z</example>
        [DataMember(Name = "period_date", EmitDefaultValue = false)]
        public string PeriodDate { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        /// <example>0.0691</example>
        [DataMember(Name = "total_price", EmitDefaultValue = false)]
        public decimal TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets UserInitiatedPaidQuantity
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "user_initiated_paid_quantity", EmitDefaultValue = false)]
        public int UserInitiatedPaidQuantity { get; set; }

        /// <summary>
        /// Gets or Sets UserInitiatedPrice
        /// </summary>
        /// <example>0.0691</example>
        [DataMember(Name = "user_initiated_price", EmitDefaultValue = false)]
        public decimal UserInitiatedPrice { get; set; }

        /// <summary>
        /// Gets or Sets UserInitiatedQuantity
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "user_initiated_quantity", EmitDefaultValue = false)]
        public int UserInitiatedQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelExtendedStatisticsInner {\n");
            sb.Append("  BusinessInitiatedPaidQuantity: ").Append(BusinessInitiatedPaidQuantity).Append("\n");
            sb.Append("  BusinessInitiatedPrice: ").Append(BusinessInitiatedPrice).Append("\n");
            sb.Append("  BusinessInitiatedQuantity: ").Append(BusinessInitiatedQuantity).Append("\n");
            sb.Append("  FreeEntryPoint: ").Append(FreeEntryPoint).Append("\n");
            sb.Append("  FreeQuantity: ").Append(FreeQuantity).Append("\n");
            sb.Append("  FreeTier: ").Append(FreeTier).Append("\n");
            sb.Append("  PaidQuantity: ").Append(PaidQuantity).Append("\n");
            sb.Append("  PeriodDate: ").Append(PeriodDate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  UserInitiatedPaidQuantity: ").Append(UserInitiatedPaidQuantity).Append("\n");
            sb.Append("  UserInitiatedPrice: ").Append(UserInitiatedPrice).Append("\n");
            sb.Append("  UserInitiatedQuantity: ").Append(UserInitiatedQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelExtendedStatisticsInner);
        }

        /// <summary>
        /// Returns true if ChannelExtendedStatisticsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelExtendedStatisticsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelExtendedStatisticsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BusinessInitiatedPaidQuantity == input.BusinessInitiatedPaidQuantity ||
                    this.BusinessInitiatedPaidQuantity.Equals(input.BusinessInitiatedPaidQuantity)
                ) && 
                (
                    this.BusinessInitiatedPrice == input.BusinessInitiatedPrice ||
                    this.BusinessInitiatedPrice.Equals(input.BusinessInitiatedPrice)
                ) && 
                (
                    this.BusinessInitiatedQuantity == input.BusinessInitiatedQuantity ||
                    this.BusinessInitiatedQuantity.Equals(input.BusinessInitiatedQuantity)
                ) && 
                (
                    this.FreeEntryPoint == input.FreeEntryPoint ||
                    this.FreeEntryPoint.Equals(input.FreeEntryPoint)
                ) && 
                (
                    this.FreeQuantity == input.FreeQuantity ||
                    this.FreeQuantity.Equals(input.FreeQuantity)
                ) && 
                (
                    this.FreeTier == input.FreeTier ||
                    this.FreeTier.Equals(input.FreeTier)
                ) && 
                (
                    this.PaidQuantity == input.PaidQuantity ||
                    this.PaidQuantity.Equals(input.PaidQuantity)
                ) && 
                (
                    this.PeriodDate == input.PeriodDate ||
                    (this.PeriodDate != null &&
                    this.PeriodDate.Equals(input.PeriodDate))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    this.TotalPrice.Equals(input.TotalPrice)
                ) && 
                (
                    this.UserInitiatedPaidQuantity == input.UserInitiatedPaidQuantity ||
                    this.UserInitiatedPaidQuantity.Equals(input.UserInitiatedPaidQuantity)
                ) && 
                (
                    this.UserInitiatedPrice == input.UserInitiatedPrice ||
                    this.UserInitiatedPrice.Equals(input.UserInitiatedPrice)
                ) && 
                (
                    this.UserInitiatedQuantity == input.UserInitiatedQuantity ||
                    this.UserInitiatedQuantity.Equals(input.UserInitiatedQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BusinessInitiatedPaidQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.BusinessInitiatedPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.BusinessInitiatedQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeEntryPoint.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeTier.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidQuantity.GetHashCode();
                if (this.PeriodDate != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.UserInitiatedPaidQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.UserInitiatedPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.UserInitiatedQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
