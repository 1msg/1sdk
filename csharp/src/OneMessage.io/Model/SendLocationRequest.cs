/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneMessage.io.Client.OpenAPIDateConverter;

namespace OneMessage.io.Model
{
    /// <summary>
    /// SendLocationRequest
    /// </summary>
    [DataContract(Name = "SendLocationRequest")]
    public partial class SendLocationRequest : IEquatable<SendLocationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendLocationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendLocationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendLocationRequest" /> class.
        /// </summary>
        /// <param name="chatId">**Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter..</param>
        /// <param name="phone">**Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369..</param>
        /// <param name="lat">Latitude of the location. Example: 45.018337 (required).</param>
        /// <param name="lng">Longitude of the location. Example: -73.968285 (required).</param>
        /// <param name="address">Address of the location. Only displayed if name is present. Example: 9766 Valley View St., New York, NY 10024.</param>
        /// <param name="name">Name of the location. Example: Facebook HQ.</param>
        public SendLocationRequest(string chatId = default(string), int phone = default(int), string lat = default(string), string lng = default(string), string address = default(string), string name = default(string))
        {
            // to ensure "lat" is required (not null)
            if (lat == null)
            {
                throw new ArgumentNullException("lat is a required property for SendLocationRequest and cannot be null");
            }
            this.Lat = lat;
            // to ensure "lng" is required (not null)
            if (lng == null)
            {
                throw new ArgumentNullException("lng is a required property for SendLocationRequest and cannot be null");
            }
            this.Lng = lng;
            this.ChatId = chatId;
            this.Phone = phone;
            this.Address = address;
            this.Name = name;
        }

        /// <summary>
        /// **Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter.
        /// </summary>
        /// <value>**Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter.</value>
        /// <example>12020721369@c.us</example>
        [DataMember(Name = "chatId", EmitDefaultValue = false)]
        public string ChatId { get; set; }

        /// <summary>
        /// **Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369.
        /// </summary>
        /// <value>**Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369.</value>
        /// <example>12020721369</example>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public int Phone { get; set; }

        /// <summary>
        /// Latitude of the location. Example: 45.018337
        /// </summary>
        /// <value>Latitude of the location. Example: 45.018337</value>
        /// <example>45.018337</example>
        [DataMember(Name = "lat", IsRequired = true, EmitDefaultValue = true)]
        public string Lat { get; set; }

        /// <summary>
        /// Longitude of the location. Example: -73.968285
        /// </summary>
        /// <value>Longitude of the location. Example: -73.968285</value>
        /// <example>-73.968285</example>
        [DataMember(Name = "lng", IsRequired = true, EmitDefaultValue = true)]
        public string Lng { get; set; }

        /// <summary>
        /// Address of the location. Only displayed if name is present. Example: 9766 Valley View St., New York, NY 10024
        /// </summary>
        /// <value>Address of the location. Only displayed if name is present. Example: 9766 Valley View St., New York, NY 10024</value>
        /// <example>9766 Valley View St., New York, NY 10024</example>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Name of the location. Example: Facebook HQ
        /// </summary>
        /// <value>Name of the location. Example: Facebook HQ</value>
        /// <example>Facebook HQ</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendLocationRequest {\n");
            sb.Append("  ChatId: ").Append(ChatId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lng: ").Append(Lng).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendLocationRequest);
        }

        /// <summary>
        /// Returns true if SendLocationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendLocationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendLocationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChatId == input.ChatId ||
                    (this.ChatId != null &&
                    this.ChatId.Equals(input.ChatId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    this.Phone.Equals(input.Phone)
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lng == input.Lng ||
                    (this.Lng != null &&
                    this.Lng.Equals(input.Lng))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChatId != null)
                {
                    hashCode = (hashCode * 59) + this.ChatId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                if (this.Lat != null)
                {
                    hashCode = (hashCode * 59) + this.Lat.GetHashCode();
                }
                if (this.Lng != null)
                {
                    hashCode = (hashCode * 59) + this.Lng.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
