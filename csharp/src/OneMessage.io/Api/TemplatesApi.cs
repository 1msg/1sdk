/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OneMessage.io.Client;
using OneMessage.io.Model;

namespace OneMessage.io.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create template
        /// </summary>
        /// <remarks>
        /// Create new template for sending.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AddTemplate(AddTemplateRequest addTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Create template
        /// </summary>
        /// <remarks>
        /// Create new template for sending.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddTemplateWithHttpInfo(AddTemplateRequest addTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// Remove template
        /// </summary>
        /// <remarks>
        /// Deleted template can not be restored.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMe</returns>
        SetMe RemoveTemplate(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Remove template
        /// </summary>
        /// <remarks>
        /// Deleted template can not be restored.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMe</returns>
        ApiResponse<SetMe> RemoveTemplateWithHttpInfo(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// Send Template Message
        /// </summary>
        /// <remarks>
        /// Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendTemplate(SendTemplateRequest sendTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Send Template Message
        /// </summary>
        /// <remarks>
        /// Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendTemplateWithHttpInfo(SendTemplateRequest sendTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// Get templates list
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemplates</returns>
        GetTemplates TemplatesList(int operationIndex = 0);

        /// <summary>
        /// Get templates list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemplates</returns>
        ApiResponse<GetTemplates> TemplatesListWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create template
        /// </summary>
        /// <remarks>
        /// Create new template for sending.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddTemplateAsync(AddTemplateRequest addTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create template
        /// </summary>
        /// <remarks>
        /// Create new template for sending.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTemplateWithHttpInfoAsync(AddTemplateRequest addTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove template
        /// </summary>
        /// <remarks>
        /// Deleted template can not be restored.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMe</returns>
        System.Threading.Tasks.Task<SetMe> RemoveTemplateAsync(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove template
        /// </summary>
        /// <remarks>
        /// Deleted template can not be restored.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMe)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetMe>> RemoveTemplateWithHttpInfoAsync(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Template Message
        /// </summary>
        /// <remarks>
        /// Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendTemplateAsync(SendTemplateRequest sendTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Template Message
        /// </summary>
        /// <remarks>
        /// Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendTemplateWithHttpInfoAsync(SendTemplateRequest sendTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get templates list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemplates</returns>
        System.Threading.Tasks.Task<GetTemplates> TemplatesListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get templates list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTemplates>> TemplatesListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private OneMessage.io.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(string basePath)
        {
            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                new OneMessage.io.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(OneMessage.io.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(OneMessage.io.Client.ISynchronousClient client, OneMessage.io.Client.IAsynchronousClient asyncClient, OneMessage.io.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OneMessage.io.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OneMessage.io.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OneMessage.io.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OneMessage.io.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create template Create new template for sending.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AddTemplate(AddTemplateRequest addTemplateRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<Object> localVarResponse = AddTemplateWithHttpInfo(addTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create template Create new template for sending.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public OneMessage.io.Client.ApiResponse<Object> AddTemplateWithHttpInfo(AddTemplateRequest addTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addTemplateRequest' is set
            if (addTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'addTemplateRequest' when calling TemplatesApi->AddTemplate");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.AddTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/addTemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create template Create new template for sending.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddTemplateAsync(AddTemplateRequest addTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<Object> localVarResponse = await AddTemplateWithHttpInfoAsync(addTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create template Create new template for sending.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<Object>> AddTemplateWithHttpInfoAsync(AddTemplateRequest addTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addTemplateRequest' is set
            if (addTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'addTemplateRequest' when calling TemplatesApi->AddTemplate");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.AddTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/addTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove template Deleted template can not be restored.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMe</returns>
        public SetMe RemoveTemplate(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SetMe> localVarResponse = RemoveTemplateWithHttpInfo(removeTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove template Deleted template can not be restored.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMe</returns>
        public OneMessage.io.Client.ApiResponse<SetMe> RemoveTemplateWithHttpInfo(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'removeTemplateRequest' is set
            if (removeTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'removeTemplateRequest' when calling TemplatesApi->RemoveTemplate");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.RemoveTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetMe>("/removeTemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove template Deleted template can not be restored.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMe</returns>
        public async System.Threading.Tasks.Task<SetMe> RemoveTemplateAsync(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SetMe> localVarResponse = await RemoveTemplateWithHttpInfoAsync(removeTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove template Deleted template can not be restored.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMe)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SetMe>> RemoveTemplateWithHttpInfoAsync(RemoveTemplateRequest removeTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeTemplateRequest' is set
            if (removeTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'removeTemplateRequest' when calling TemplatesApi->RemoveTemplate");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.RemoveTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetMe>("/removeTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Template Message Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendTemplate(SendTemplateRequest sendTemplateRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendTemplateWithHttpInfo(sendTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Template Message Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendTemplateWithHttpInfo(SendTemplateRequest sendTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendTemplateRequest' is set
            if (sendTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendTemplateRequest' when calling TemplatesApi->SendTemplate");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.SendTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendTemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Template Message Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendTemplateAsync(SendTemplateRequest sendTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendTemplateWithHttpInfoAsync(sendTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Template Message Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendTemplateWithHttpInfoAsync(SendTemplateRequest sendTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendTemplateRequest' is set
            if (sendTemplateRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendTemplateRequest' when calling TemplatesApi->SendTemplate");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendTemplateRequest;

            localVarRequestOptions.Operation = "TemplatesApi.SendTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get templates list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTemplates</returns>
        public GetTemplates TemplatesList(int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<GetTemplates> localVarResponse = TemplatesListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get templates list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTemplates</returns>
        public OneMessage.io.Client.ApiResponse<GetTemplates> TemplatesListWithHttpInfo(int operationIndex = 0)
        {
            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemplatesApi.TemplatesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTemplates>("/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get templates list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTemplates</returns>
        public async System.Threading.Tasks.Task<GetTemplates> TemplatesListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<GetTemplates> localVarResponse = await TemplatesListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get templates list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTemplates)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<GetTemplates>> TemplatesListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemplatesApi.TemplatesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTemplates>("/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplatesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
