/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests — through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OneMessage.io.Client;
using OneMessage.io.Model;

namespace OneMessage.io.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsCatalogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send a Product
        /// </summary>
        /// <remarks>
        /// Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendProduct(SendProductRequest sendProductRequest, int operationIndex = 0);

        /// <summary>
        /// Send a Product
        /// </summary>
        /// <remarks>
        /// Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendProductWithHttpInfo(SendProductRequest sendProductRequest, int operationIndex = 0);
        /// <summary>
        /// Set Commerce Settings
        /// </summary>
        /// <remarks>
        /// **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCommerce</returns>
        SetCommerce SetCommerce(Commerce commerce, int operationIndex = 0);

        /// <summary>
        /// Set Commerce Settings
        /// </summary>
        /// <remarks>
        /// **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCommerce</returns>
        ApiResponse<SetCommerce> SetCommerceWithHttpInfo(Commerce commerce, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsCatalogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Send a Product
        /// </summary>
        /// <remarks>
        /// Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendProductAsync(SendProductRequest sendProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a Product
        /// </summary>
        /// <remarks>
        /// Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendProductWithHttpInfoAsync(SendProductRequest sendProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Commerce Settings
        /// </summary>
        /// <remarks>
        /// **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCommerce</returns>
        System.Threading.Tasks.Task<SetCommerce> SetCommerceAsync(Commerce commerce, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Commerce Settings
        /// </summary>
        /// <remarks>
        /// **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCommerce)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetCommerce>> SetCommerceWithHttpInfoAsync(Commerce commerce, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsCatalogsApi : IProductsCatalogsApiSync, IProductsCatalogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsCatalogsApi : IProductsCatalogsApi
    {
        private OneMessage.io.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsCatalogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsCatalogsApi(string basePath)
        {
            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                new OneMessage.io.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsCatalogsApi(OneMessage.io.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductsCatalogsApi(OneMessage.io.Client.ISynchronousClient client, OneMessage.io.Client.IAsynchronousClient asyncClient, OneMessage.io.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OneMessage.io.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OneMessage.io.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OneMessage.io.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OneMessage.io.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Send a Product Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendProduct(SendProductRequest sendProductRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendProductWithHttpInfo(sendProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Product Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendProductWithHttpInfo(SendProductRequest sendProductRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendProductRequest' is set
            if (sendProductRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendProductRequest' when calling ProductsCatalogsApi->SendProduct");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendProductRequest;

            localVarRequestOptions.Operation = "ProductsCatalogsApi.SendProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendProduct", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Product Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendProductAsync(SendProductRequest sendProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendProductWithHttpInfoAsync(sendProductRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Product Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendProductRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendProductWithHttpInfoAsync(SendProductRequest sendProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendProductRequest' is set
            if (sendProductRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendProductRequest' when calling ProductsCatalogsApi->SendProduct");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendProductRequest;

            localVarRequestOptions.Operation = "ProductsCatalogsApi.SendProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendProduct", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Commerce Settings **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetCommerce</returns>
        public SetCommerce SetCommerce(Commerce commerce, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SetCommerce> localVarResponse = SetCommerceWithHttpInfo(commerce);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Commerce Settings **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetCommerce</returns>
        public OneMessage.io.Client.ApiResponse<SetCommerce> SetCommerceWithHttpInfo(Commerce commerce, int operationIndex = 0)
        {
            // verify the required parameter 'commerce' is set
            if (commerce == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'commerce' when calling ProductsCatalogsApi->SetCommerce");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = commerce;

            localVarRequestOptions.Operation = "ProductsCatalogsApi.SetCommerce";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetCommerce>("/commerce", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCommerce", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Commerce Settings **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetCommerce</returns>
        public async System.Threading.Tasks.Task<SetCommerce> SetCommerceAsync(Commerce commerce, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SetCommerce> localVarResponse = await SetCommerceWithHttpInfoAsync(commerce, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Commerce Settings **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commerce"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetCommerce)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SetCommerce>> SetCommerceWithHttpInfoAsync(Commerce commerce, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'commerce' is set
            if (commerce == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'commerce' when calling ProductsCatalogsApi->SetCommerce");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = commerce;

            localVarRequestOptions.Operation = "ProductsCatalogsApi.SetCommerce";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetCommerce>("/commerce", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetCommerce", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
