/*
 * one_msg_waba_sdk
 *
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OneMessage.io.Client;
using OneMessage.io.Model;

namespace OneMessage.io.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get messages list
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessages</returns>
        GetMessages MessagesList(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get messages list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessages</returns>
        ApiResponse<GetMessages> MessagesListWithHttpInfo(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0);
        /// <summary>
        /// Mark message as read
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMe</returns>
        SetMe ReadMessage(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0);

        /// <summary>
        /// Mark message as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMe</returns>
        ApiResponse<SetMe> ReadMessageWithHttpInfo(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0);
        /// <summary>
        /// Send a Contact
        /// </summary>
        /// <remarks>
        /// Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendContact(SendContactRequest sendContactRequest, int operationIndex = 0);

        /// <summary>
        /// Send a Contact
        /// </summary>
        /// <remarks>
        /// Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendContactWithHttpInfo(SendContactRequest sendContactRequest, int operationIndex = 0);
        /// <summary>
        /// Send a File
        /// </summary>
        /// <remarks>
        /// Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendFile(SendFileRequest sendFileRequest, int operationIndex = 0);

        /// <summary>
        /// Send a File
        /// </summary>
        /// <remarks>
        /// Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendFileWithHttpInfo(SendFileRequest sendFileRequest, int operationIndex = 0);
        /// <summary>
        /// Send List Message
        /// </summary>
        /// <remarks>
        /// Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendList(SendListRequest sendListRequest, int operationIndex = 0);

        /// <summary>
        /// Send List Message
        /// </summary>
        /// <remarks>
        /// Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendListWithHttpInfo(SendListRequest sendListRequest, int operationIndex = 0);
        /// <summary>
        /// Send a Location
        /// </summary>
        /// <remarks>
        /// Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendLocation(SendLocationRequest sendLocationRequest, int operationIndex = 0);

        /// <summary>
        /// Send a Location
        /// </summary>
        /// <remarks>
        /// Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendLocationWithHttpInfo(SendLocationRequest sendLocationRequest, int operationIndex = 0);
        /// <summary>
        /// Send a Message
        /// </summary>
        /// <remarks>
        /// Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        SendMessageStatus SendMessage(SendMessageRequest sendMessageRequest, int operationIndex = 0);

        /// <summary>
        /// Send a Message
        /// </summary>
        /// <remarks>
        /// Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        ApiResponse<SendMessageStatus> SendMessageWithHttpInfo(SendMessageRequest sendMessageRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get messages list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessages</returns>
        System.Threading.Tasks.Task<GetMessages> MessagesListAsync(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get messages list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessages)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessages>> MessagesListWithHttpInfoAsync(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark message as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMe</returns>
        System.Threading.Tasks.Task<SetMe> ReadMessageAsync(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark message as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMe)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetMe>> ReadMessageWithHttpInfoAsync(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a Contact
        /// </summary>
        /// <remarks>
        /// Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendContactAsync(SendContactRequest sendContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a Contact
        /// </summary>
        /// <remarks>
        /// Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendContactWithHttpInfoAsync(SendContactRequest sendContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a File
        /// </summary>
        /// <remarks>
        /// Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendFileAsync(SendFileRequest sendFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a File
        /// </summary>
        /// <remarks>
        /// Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendFileWithHttpInfoAsync(SendFileRequest sendFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send List Message
        /// </summary>
        /// <remarks>
        /// Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendListAsync(SendListRequest sendListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send List Message
        /// </summary>
        /// <remarks>
        /// Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendListWithHttpInfoAsync(SendListRequest sendListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a Location
        /// </summary>
        /// <remarks>
        /// Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendLocationAsync(SendLocationRequest sendLocationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a Location
        /// </summary>
        /// <remarks>
        /// Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendLocationWithHttpInfoAsync(SendLocationRequest sendLocationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a Message
        /// </summary>
        /// <remarks>
        /// Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        System.Threading.Tasks.Task<SendMessageStatus> SendMessageAsync(SendMessageRequest sendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a Message
        /// </summary>
        /// <remarks>
        /// Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </remarks>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageStatus>> SendMessageWithHttpInfoAsync(SendMessageRequest sendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApi : IMessagingApiSync, IMessagingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApi : IMessagingApi
    {
        private OneMessage.io.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApi(string basePath)
        {
            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                new OneMessage.io.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagingApi(OneMessage.io.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OneMessage.io.Client.Configuration.MergeConfigurations(
                OneMessage.io.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneMessage.io.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessagingApi(OneMessage.io.Client.ISynchronousClient client, OneMessage.io.Client.IAsynchronousClient asyncClient, OneMessage.io.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OneMessage.io.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OneMessage.io.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OneMessage.io.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OneMessage.io.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OneMessage.io.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get messages list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMessages</returns>
        public GetMessages MessagesList(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<GetMessages> localVarResponse = MessagesListWithHttpInfo(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMessages</returns>
        public OneMessage.io.Client.ApiResponse<GetMessages> MessagesListWithHttpInfo(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0)
        {
            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (last != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "last", last));
            }
            if (lastMessageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "lastMessageNumber", lastMessageNumber));
            }
            if (firstMessageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "firstMessageNumber", firstMessageNumber));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (chatId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "chatId", chatId));
            }
            if (minTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "min_time", minTime));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "max_time", maxTime));
            }
            if (msgId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "msgId", msgId));
            }

            localVarRequestOptions.Operation = "MessagingApi.MessagesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMessages>("/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessagesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get messages list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessages</returns>
        public async System.Threading.Tasks.Task<GetMessages> MessagesListAsync(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<GetMessages> localVarResponse = await MessagesListWithHttpInfoAsync(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages list 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="last">Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)</param>
        /// <param name="lastMessageNumber">The lastMessageNumber parameter from the last response. Example: 100 (optional)</param>
        /// <param name="firstMessageNumber">The firstMessageNumber parameter from the last response. Example: 1 (optional)</param>
        /// <param name="limit">Sets length of the message list. Default 100. With value 0 returns all messages. (optional)</param>
        /// <param name="chatId">Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)</param>
        /// <param name="minTime">Filter messages received after specified time. Example: 1665396610 (optional)</param>
        /// <param name="maxTime">Filter messages received before specified time. Example: 1665396610 (optional)</param>
        /// <param name="msgId">Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessages)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<GetMessages>> MessagesListWithHttpInfoAsync(bool? last = default(bool?), int? lastMessageNumber = default(int?), int? firstMessageNumber = default(int?), int? limit = default(int?), string chatId = default(string), int? minTime = default(int?), int? maxTime = default(int?), string msgId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (last != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "last", last));
            }
            if (lastMessageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "lastMessageNumber", lastMessageNumber));
            }
            if (firstMessageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "firstMessageNumber", firstMessageNumber));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (chatId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "chatId", chatId));
            }
            if (minTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "min_time", minTime));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "max_time", maxTime));
            }
            if (msgId != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "msgId", msgId));
            }

            localVarRequestOptions.Operation = "MessagingApi.MessagesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMessages>("/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MessagesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark message as read 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMe</returns>
        public SetMe ReadMessage(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SetMe> localVarResponse = ReadMessageWithHttpInfo(readMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark message as read 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMe</returns>
        public OneMessage.io.Client.ApiResponse<SetMe> ReadMessageWithHttpInfo(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0)
        {
            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readMessageRequest;

            localVarRequestOptions.Operation = "MessagingApi.ReadMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetMe>("/readMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark message as read 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMe</returns>
        public async System.Threading.Tasks.Task<SetMe> ReadMessageAsync(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SetMe> localVarResponse = await ReadMessageWithHttpInfoAsync(readMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark message as read 
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readMessageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMe)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SetMe>> ReadMessageWithHttpInfoAsync(ReadMessageRequest readMessageRequest = default(ReadMessageRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readMessageRequest;

            localVarRequestOptions.Operation = "MessagingApi.ReadMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetMe>("/readMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Contact Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendContact(SendContactRequest sendContactRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendContactWithHttpInfo(sendContactRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Contact Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendContactWithHttpInfo(SendContactRequest sendContactRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendContactRequest' is set
            if (sendContactRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendContactRequest' when calling MessagingApi->SendContact");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendContactRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendContact", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Contact Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendContactAsync(SendContactRequest sendContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendContactWithHttpInfoAsync(sendContactRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Contact Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendContactRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendContactWithHttpInfoAsync(SendContactRequest sendContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendContactRequest' is set
            if (sendContactRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendContactRequest' when calling MessagingApi->SendContact");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendContactRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendContact", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a File Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendFile(SendFileRequest sendFileRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendFileWithHttpInfo(sendFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a File Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendFileWithHttpInfo(SendFileRequest sendFileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendFileRequest' is set
            if (sendFileRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendFileRequest' when calling MessagingApi->SendFile");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendFileRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendFile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a File Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendFileAsync(SendFileRequest sendFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendFileWithHttpInfoAsync(sendFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a File Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendFileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendFileWithHttpInfoAsync(SendFileRequest sendFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendFileRequest' is set
            if (sendFileRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendFileRequest' when calling MessagingApi->SendFile");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendFileRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendFile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send List Message Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendList(SendListRequest sendListRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendListWithHttpInfo(sendListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send List Message Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendListWithHttpInfo(SendListRequest sendListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendListRequest' is set
            if (sendListRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendListRequest' when calling MessagingApi->SendList");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendListRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send List Message Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendListAsync(SendListRequest sendListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendListWithHttpInfoAsync(sendListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send List Message Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendListWithHttpInfoAsync(SendListRequest sendListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendListRequest' is set
            if (sendListRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendListRequest' when calling MessagingApi->SendList");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendListRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Location Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendLocation(SendLocationRequest sendLocationRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendLocationWithHttpInfo(sendLocationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Location Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendLocationWithHttpInfo(SendLocationRequest sendLocationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendLocationRequest' is set
            if (sendLocationRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendLocationRequest' when calling MessagingApi->SendLocation");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendLocationRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendLocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Location Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendLocationAsync(SendLocationRequest sendLocationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendLocationWithHttpInfoAsync(sendLocationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Location Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendLocationWithHttpInfoAsync(SendLocationRequest sendLocationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendLocationRequest' is set
            if (sendLocationRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendLocationRequest' when calling MessagingApi->SendLocation");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendLocationRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendLocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Message Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SendMessageStatus</returns>
        public SendMessageStatus SendMessage(SendMessageRequest sendMessageRequest, int operationIndex = 0)
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = SendMessageWithHttpInfo(sendMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Message Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SendMessageStatus</returns>
        public OneMessage.io.Client.ApiResponse<SendMessageStatus> SendMessageWithHttpInfo(SendMessageRequest sendMessageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sendMessageRequest' is set
            if (sendMessageRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendMessageRequest' when calling MessagingApi->SendMessage");
            }

            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendMessageRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SendMessageStatus>("/sendMessage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a Message Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SendMessageStatus</returns>
        public async System.Threading.Tasks.Task<SendMessageStatus> SendMessageAsync(SendMessageRequest sendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneMessage.io.Client.ApiResponse<SendMessageStatus> localVarResponse = await SendMessageWithHttpInfoAsync(sendMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Message Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
        /// </summary>
        /// <exception cref="OneMessage.io.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SendMessageStatus)</returns>
        public async System.Threading.Tasks.Task<OneMessage.io.Client.ApiResponse<SendMessageStatus>> SendMessageWithHttpInfoAsync(SendMessageRequest sendMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendMessageRequest' is set
            if (sendMessageRequest == null)
            {
                throw new OneMessage.io.Client.ApiException(400, "Missing required parameter 'sendMessageRequest' when calling MessagingApi->SendMessage");
            }


            OneMessage.io.Client.RequestOptions localVarRequestOptions = new OneMessage.io.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneMessage.io.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneMessage.io.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendMessageRequest;

            localVarRequestOptions.Operation = "MessagingApi.SendMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(OneMessage.io.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SendMessageStatus>("/sendMessage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
