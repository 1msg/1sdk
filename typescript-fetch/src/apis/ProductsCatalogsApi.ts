/* tslint:disable */
/* eslint-disable */
/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter \'token\' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests — through the JSON-encoded request body.   All \'send\' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Commerce,
  GetMe401Response,
  SendMessageStatus,
  SendProductRequest,
  SetCommerce,
} from '../models/index';
import {
    CommerceFromJSON,
    CommerceToJSON,
    GetMe401ResponseFromJSON,
    GetMe401ResponseToJSON,
    SendMessageStatusFromJSON,
    SendMessageStatusToJSON,
    SendProductRequestFromJSON,
    SendProductRequestToJSON,
    SetCommerceFromJSON,
    SetCommerceToJSON,
} from '../models/index';

export interface SendProductOperationRequest {
    sendProductRequest: SendProductRequest;
}

export interface SetCommerceRequest {
    commerce: Commerce;
}

/**
 * 
 */
export class ProductsCatalogsApi extends runtime.BaseAPI {

    /**
     * Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
     * Send a Product
     */
    async sendProductRaw(requestParameters: SendProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendMessageStatus>> {
        if (requestParameters.sendProductRequest === null || requestParameters.sendProductRequest === undefined) {
            throw new runtime.RequiredError('sendProductRequest','Required parameter requestParameters.sendProductRequest was null or undefined when calling sendProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/sendProduct`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendProductRequestToJSON(requestParameters.sendProductRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendMessageStatusFromJSON(jsonValue));
    }

    /**
     * Send a single product or product list to a new or existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.  First, you need to upload your inventory to Facebook. You can use the API or Facebook’s Commerce Manager to do that. If you already have a Facebook catalog set up, we suggest that you leverage that catalog for WhatsApp commerce use cases.  **You can not send products to Business WhatsApp clients.**
     * Send a Product
     */
    async sendProduct(requestParameters: SendProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendMessageStatus> {
        const response = await this.sendProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
     * Set Commerce Settings
     */
    async setCommerceRaw(requestParameters: SetCommerceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetCommerce>> {
        if (requestParameters.commerce === null || requestParameters.commerce === undefined) {
            throw new runtime.RequiredError('commerce','Required parameter requestParameters.commerce was null or undefined when calling setCommerce.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/commerce`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommerceToJSON(requestParameters.commerce),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetCommerceFromJSON(jsonValue));
    }

    /**
     * **is_catalog_visible** - Set to true to show catalog storefront icon or false to hide it. **is_cart_enabled** - Set to true to enable cart or false to disable it.
     * Set Commerce Settings
     */
    async setCommerce(requestParameters: SetCommerceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetCommerce> {
        const response = await this.setCommerceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
