/* tslint:disable */
/* eslint-disable */
/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter \'token\' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All \'send\' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTemplateRequest,
  GetMe401Response,
  GetTemplates,
  RemoveTemplateRequest,
  SendMessageStatus,
  SendTemplateRequest,
  SetMe,
} from '../models/index';
import {
    AddTemplateRequestFromJSON,
    AddTemplateRequestToJSON,
    GetMe401ResponseFromJSON,
    GetMe401ResponseToJSON,
    GetTemplatesFromJSON,
    GetTemplatesToJSON,
    RemoveTemplateRequestFromJSON,
    RemoveTemplateRequestToJSON,
    SendMessageStatusFromJSON,
    SendMessageStatusToJSON,
    SendTemplateRequestFromJSON,
    SendTemplateRequestToJSON,
    SetMeFromJSON,
    SetMeToJSON,
} from '../models/index';

export interface AddTemplateOperationRequest {
    addTemplateRequest: AddTemplateRequest;
}

export interface RemoveTemplateOperationRequest {
    removeTemplateRequest: RemoveTemplateRequest;
}

export interface SendTemplateOperationRequest {
    sendTemplateRequest: SendTemplateRequest;
}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Create new template for sending.
     * Create template
     */
    async addTemplateRaw(requestParameters: AddTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.addTemplateRequest === null || requestParameters.addTemplateRequest === undefined) {
            throw new runtime.RequiredError('addTemplateRequest','Required parameter requestParameters.addTemplateRequest was null or undefined when calling addTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/addTemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTemplateRequestToJSON(requestParameters.addTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create new template for sending.
     * Create template
     */
    async addTemplate(requestParameters: AddTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deleted template can not be restored.
     * Remove template
     */
    async removeTemplateRaw(requestParameters: RemoveTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetMe>> {
        if (requestParameters.removeTemplateRequest === null || requestParameters.removeTemplateRequest === undefined) {
            throw new runtime.RequiredError('removeTemplateRequest','Required parameter requestParameters.removeTemplateRequest was null or undefined when calling removeTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/removeTemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveTemplateRequestToJSON(requestParameters.removeTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetMeFromJSON(jsonValue));
    }

    /**
     * Deleted template can not be restored.
     * Remove template
     */
    async removeTemplate(requestParameters: RemoveTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetMe> {
        const response = await this.removeTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\"template\":\"template_name\",\"language\":{\"policy\":\"deterministic\",\"code\":\"en\"},\"namespace\":\"namespace_id\",\"params\":[{\"type\":\"header\",\"parameters\":[{\"type\":\"image\",\"image\": {\"link\":\"https://...\"}}]},{\"type\":\"body\",\"parameters\":[{\"type\":\"text\",\"text\":\"test\"}]}],\"phone\":\"556123122026\"}
     * Send Template Message
     */
    async sendTemplateRaw(requestParameters: SendTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendMessageStatus>> {
        if (requestParameters.sendTemplateRequest === null || requestParameters.sendTemplateRequest === undefined) {
            throw new runtime.RequiredError('sendTemplateRequest','Required parameter requestParameters.sendTemplateRequest was null or undefined when calling sendTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/sendTemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendTemplateRequestToJSON(requestParameters.sendTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendMessageStatusFromJSON(jsonValue));
    }

    /**
     * Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\"template\":\"template_name\",\"language\":{\"policy\":\"deterministic\",\"code\":\"en\"},\"namespace\":\"namespace_id\",\"params\":[{\"type\":\"header\",\"parameters\":[{\"type\":\"image\",\"image\": {\"link\":\"https://...\"}}]},{\"type\":\"body\",\"parameters\":[{\"type\":\"text\",\"text\":\"test\"}]}],\"phone\":\"556123122026\"}
     * Send Template Message
     */
    async sendTemplate(requestParameters: SendTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendMessageStatus> {
        const response = await this.sendTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get templates list
     */
    async templatesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTemplates>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTemplatesFromJSON(jsonValue));
    }

    /**
     * 
     * Get templates list
     */
    async templatesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTemplates> {
        const response = await this.templatesListRaw(initOverrides);
        return await response.value();
    }

}
