/* tslint:disable */
/* eslint-disable */
/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter \'token\' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All \'send\' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAckInfo,
  GetMe401Response,
  SetWebhookStatus,
  WebhookUrl,
} from '../models/index';
import {
    GetAckInfoFromJSON,
    GetAckInfoToJSON,
    GetMe401ResponseFromJSON,
    GetMe401ResponseToJSON,
    SetWebhookStatusFromJSON,
    SetWebhookStatusToJSON,
    WebhookUrlFromJSON,
    WebhookUrlToJSON,
} from '../models/index';

export interface AckHookInfoRequest {
    messageId: string;
}

export interface SetWebhookRequest {
    webhookUrl: WebhookUrl;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * 
     * Check ACKs
     */
    async ackHookInfoRaw(requestParameters: AckHookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAckInfo>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling ackHookInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.messageId !== undefined) {
            queryParameters['messageId'] = requestParameters.messageId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/hookInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAckInfoFromJSON(jsonValue));
    }

    /**
     * 
     * Check ACKs
     */
    async ackHookInfo(requestParameters: AckHookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAckInfo> {
        const response = await this.ackHookInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the URL for receiving webhook notifications of new messages and message delivery events (ack).  **API responses in \"Callbacks\" tab**
     * Set webhook
     */
    async setWebhookRaw(requestParameters: SetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetWebhookStatus>> {
        if (requestParameters.webhookUrl === null || requestParameters.webhookUrl === undefined) {
            throw new runtime.RequiredError('webhookUrl','Required parameter requestParameters.webhookUrl was null or undefined when calling setWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-form-urlencoded';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookUrlToJSON(requestParameters.webhookUrl),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetWebhookStatusFromJSON(jsonValue));
    }

    /**
     * Sets the URL for receiving webhook notifications of new messages and message delivery events (ack).  **API responses in \"Callbacks\" tab**
     * Set webhook
     */
    async setWebhook(requestParameters: SetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetWebhookStatus> {
        const response = await this.setWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
