/* tslint:disable */
/* eslint-disable */
/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter \'token\' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All \'send\' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SendListRequestAllOfSections } from './SendListRequestAllOfSections';
import {
    SendListRequestAllOfSectionsFromJSON,
    SendListRequestAllOfSectionsFromJSONTyped,
    SendListRequestAllOfSectionsToJSON,
} from './SendListRequestAllOfSections';

/**
 * 
 * @export
 * @interface SendListRequest
 */
export interface SendListRequest {
    /**
     * **Required if phone is not set**
     * 
     * Chat ID from the message list. Examples: 12020721369@c.us
     * . Used instead of the phone parameter.
     * @type {string}
     * @memberof SendListRequest
     */
    chatId?: string;
    /**
     * **Required if chatId is not set**
     * 
     * A phone number starting with the country code. You do not
     * need to add your number. 
     * 
     * USA example: 12020721369.
     * @type {string}
     * @memberof SendListRequest
     */
    phone?: string;
    /**
     * Main message text
     * @type {string}
     * @memberof SendListRequest
     */
    body: string;
    /**
     * Header will be located above message text
     * @type {string}
     * @memberof SendListRequest
     */
    header?: string;
    /**
     * Footer will be placed under message text
     * @type {string}
     * @memberof SendListRequest
     */
    footer?: string;
    /**
     * Action for open list
     * @type {string}
     * @memberof SendListRequest
     */
    action: string;
    /**
     * Up to 10 sections from which the client can choose.
     * 
     * Each section is object with fields:
     * 
     * *title* - Title of section, up to 24 symbols. Required if there are more then 1 section
     * 
     * *rows* - available options. Required
     * 
     * 
     * 
     * Each option is object with fields:
     * 
     * *id* - Unique id for option, up to 200 symbols. Required
     * 
     * *title* - Title of option, up to 24 symbols. Required
     * 
     * *description* - Description of option, up to 72 symbols
     * 
     * 
     * 
     * Example:
     * 
     * [{"title":"Section 1","rows":[{"id":"1","title":"Option 1","description":"Description 1"}]},{"title":"Section 2","rows":[{"id":"2","title":"Option 2","description":"Description 2"}]}]
     * @type {Array<SendListRequestAllOfSections>}
     * @memberof SendListRequest
     */
    sections: Array<SendListRequestAllOfSections>;
}

/**
 * Check if a given object implements the SendListRequest interface.
 */
export function instanceOfSendListRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "body" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "sections" in value;

    return isInstance;
}

export function SendListRequestFromJSON(json: any): SendListRequest {
    return SendListRequestFromJSONTyped(json, false);
}

export function SendListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendListRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chatId': !exists(json, 'chatId') ? undefined : json['chatId'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'body': json['body'],
        'header': !exists(json, 'header') ? undefined : json['header'],
        'footer': !exists(json, 'footer') ? undefined : json['footer'],
        'action': json['action'],
        'sections': ((json['sections'] as Array<any>).map(SendListRequestAllOfSectionsFromJSON)),
    };
}

export function SendListRequestToJSON(value?: SendListRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chatId': value.chatId,
        'phone': value.phone,
        'body': value.body,
        'header': value.header,
        'footer': value.footer,
        'action': value.action,
        'sections': ((value.sections as Array<any>).map(SendListRequestAllOfSectionsToJSON)),
    };
}

