/* tslint:disable */
/* eslint-disable */
/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter \'token\' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All \'send\' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SendTemplateRequestAllOfLanguage } from './SendTemplateRequestAllOfLanguage';
import {
    SendTemplateRequestAllOfLanguageFromJSON,
    SendTemplateRequestAllOfLanguageFromJSONTyped,
    SendTemplateRequestAllOfLanguageToJSON,
} from './SendTemplateRequestAllOfLanguage';
import type { SendTemplateRequestAllOfParams } from './SendTemplateRequestAllOfParams';
import {
    SendTemplateRequestAllOfParamsFromJSON,
    SendTemplateRequestAllOfParamsFromJSONTyped,
    SendTemplateRequestAllOfParamsToJSON,
} from './SendTemplateRequestAllOfParams';

/**
 * 
 * @export
 * @interface SendTemplateRequest
 */
export interface SendTemplateRequest {
    /**
     * Can be found by method /templates
     * @type {string}
     * @memberof SendTemplateRequest
     */
    namespace: string;
    /**
     * **Required if phone is not set**
     * 
     * Chat ID from the message list. Examples: 12020721369@c.us
     * . Used instead of the phone parameter.
     * @type {string}
     * @memberof SendTemplateRequest
     */
    chatId?: string;
    /**
     * **Required if chatId is not set**
     * 
     * A phone number starting with the country code. You do not
     * need to add your number. 
     * 
     * USA example: 12020721369.
     * @type {number}
     * @memberof SendTemplateRequest
     */
    phone?: number;
    /**
     * Name of template
     * @type {string}
     * @memberof SendTemplateRequest
     */
    template: string;
    /**
     * 
     * @type {SendTemplateRequestAllOfLanguage}
     * @memberof SendTemplateRequest
     */
    language: SendTemplateRequestAllOfLanguage;
    /**
     * Array of localizable parameters to be substituted into the template. Each parameter is object contains the following field:
     * 
     * **type** - section of parameters - header, body, footer, button
     * 
     * **parameters** - variables for section.
     * 
     * Each variable is an object that can contain the following fields:
     * 
     * **type** - can be text, currency, date_time, image, document or video
     * 
     * **video**- id (mediaId)
     * 
     * **document** 
     * 
     * * id (mediaId)
     * 
     * * filename(optional)
     * 
     * **image** - object with field link (image url)
     * 
     * **currency** - object containing parameters currency_code and amount_1000.
     * 
     * * *currency_code* - Currency code as defined in ISO 4217.
     * 
     * * *amount_1000* - Amount multiplied by 1000.
     * 
     * * *fallback_value* - Default text if localization fails.
     * 
     * **date_time** - If the date_time object is used, further definition of the date and time is required.
     * 
     * * *component* - The time is assembled from components (i.e., day of the week, month, hour, etc.) The time specified will be the same, regardless of the time zone the client is in.
     * 
     * * *unix_epoch* - The time to be displayed is dependent on the time zone the client is in.
     * 
     * * *fallback_value* - Default text if localization fails.
     * 
     * **button** - if button has parameter 
     * 
     * * sub_type (url/quick_reply)
     * 
     * * parameters (array to fill button variable)
     * 
     * * index - button position.
     * 
     * **The number of parameters passed must match the number of parameters in the template**
     * @type {Array<SendTemplateRequestAllOfParams>}
     * @memberof SendTemplateRequest
     */
    params?: Array<SendTemplateRequestAllOfParams>;
}

/**
 * Check if a given object implements the SendTemplateRequest interface.
 */
export function instanceOfSendTemplateRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "namespace" in value;
    isInstance = isInstance && "template" in value;
    isInstance = isInstance && "language" in value;

    return isInstance;
}

export function SendTemplateRequestFromJSON(json: any): SendTemplateRequest {
    return SendTemplateRequestFromJSONTyped(json, false);
}

export function SendTemplateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendTemplateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'namespace': json['namespace'],
        'chatId': !exists(json, 'chatId') ? undefined : json['chatId'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'template': json['template'],
        'language': SendTemplateRequestAllOfLanguageFromJSON(json['language']),
        'params': !exists(json, 'params') ? undefined : ((json['params'] as Array<any>).map(SendTemplateRequestAllOfParamsFromJSON)),
    };
}

export function SendTemplateRequestToJSON(value?: SendTemplateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'namespace': value.namespace,
        'chatId': value.chatId,
        'phone': value.phone,
        'template': value.template,
        'language': SendTemplateRequestAllOfLanguageToJSON(value.language),
        'params': value.params === undefined ? undefined : ((value.params as Array<any>).map(SendTemplateRequestAllOfParamsToJSON)),
    };
}

