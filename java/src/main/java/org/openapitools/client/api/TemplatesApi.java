/*
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTemplateRequest;
import org.openapitools.client.model.GetMe401Response;
import org.openapitools.client.model.GetTemplates;
import org.openapitools.client.model.RemoveTemplateRequest;
import org.openapitools.client.model.SendMessageStatus;
import org.openapitools.client.model.SendTemplateRequest;
import org.openapitools.client.model.SetMe;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTemplate
     * @param addTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTemplateCall(AddTemplateRequest addTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTemplateRequest;

        // create path and map variables
        String localVarPath = "/addTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTemplateValidateBeforeCall(AddTemplateRequest addTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addTemplateRequest' is set
        if (addTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'addTemplateRequest' when calling addTemplate(Async)");
        }

        return addTemplateCall(addTemplateRequest, _callback);

    }

    /**
     * Create template
     * Create new template for sending.
     * @param addTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public Object addTemplate(AddTemplateRequest addTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addTemplateWithHttpInfo(addTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create template
     * Create new template for sending.
     * @param addTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addTemplateWithHttpInfo(AddTemplateRequest addTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = addTemplateValidateBeforeCall(addTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create template (asynchronously)
     * Create new template for sending.
     * @param addTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTemplateAsync(AddTemplateRequest addTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTemplateValidateBeforeCall(addTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTemplate
     * @param removeTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTemplateCall(RemoveTemplateRequest removeTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTemplateRequest;

        // create path and map variables
        String localVarPath = "/removeTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTemplateValidateBeforeCall(RemoveTemplateRequest removeTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'removeTemplateRequest' is set
        if (removeTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'removeTemplateRequest' when calling removeTemplate(Async)");
        }

        return removeTemplateCall(removeTemplateRequest, _callback);

    }

    /**
     * Remove template
     * Deleted template can not be restored.
     * @param removeTemplateRequest  (required)
     * @return SetMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SetMe removeTemplate(RemoveTemplateRequest removeTemplateRequest) throws ApiException {
        ApiResponse<SetMe> localVarResp = removeTemplateWithHttpInfo(removeTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Remove template
     * Deleted template can not be restored.
     * @param removeTemplateRequest  (required)
     * @return ApiResponse&lt;SetMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetMe> removeTemplateWithHttpInfo(RemoveTemplateRequest removeTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = removeTemplateValidateBeforeCall(removeTemplateRequest, null);
        Type localVarReturnType = new TypeToken<SetMe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove template (asynchronously)
     * Deleted template can not be restored.
     * @param removeTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTemplateAsync(RemoveTemplateRequest removeTemplateRequest, final ApiCallback<SetMe> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTemplateValidateBeforeCall(removeTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<SetMe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTemplate
     * @param sendTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateCall(SendTemplateRequest sendTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendTemplateRequest;

        // create path and map variables
        String localVarPath = "/sendTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTemplateValidateBeforeCall(SendTemplateRequest sendTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendTemplateRequest' is set
        if (sendTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'sendTemplateRequest' when calling sendTemplate(Async)");
        }

        return sendTemplateCall(sendTemplateRequest, _callback);

    }

    /**
     * Send Template Message
     * Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
     * @param sendTemplateRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendTemplate(SendTemplateRequest sendTemplateRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendTemplateWithHttpInfo(sendTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Send Template Message
     * Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
     * @param sendTemplateRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendTemplateWithHttpInfo(SendTemplateRequest sendTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTemplateValidateBeforeCall(sendTemplateRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Template Message (asynchronously)
     * Send Template Message to a new or existing chat. Only one of two parameters is needed to determine the destination - chatId or phone.  Example:  {\&quot;template\&quot;:\&quot;template_name\&quot;,\&quot;language\&quot;:{\&quot;policy\&quot;:\&quot;deterministic\&quot;,\&quot;code\&quot;:\&quot;en\&quot;},\&quot;namespace\&quot;:\&quot;namespace_id\&quot;,\&quot;params\&quot;:[{\&quot;type\&quot;:\&quot;header\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;image\&quot;,\&quot;image\&quot;: {\&quot;link\&quot;:\&quot;https://...\&quot;}}]},{\&quot;type\&quot;:\&quot;body\&quot;,\&quot;parameters\&quot;:[{\&quot;type\&quot;:\&quot;text\&quot;,\&quot;text\&quot;:\&quot;test\&quot;}]}],\&quot;phone\&quot;:\&quot;556123122026\&quot;}
     * @param sendTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateAsync(SendTemplateRequest sendTemplateRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTemplateValidateBeforeCall(sendTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return templatesListCall(_callback);

    }

    /**
     * Get templates list
     * 
     * @return GetTemplates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplates templatesList() throws ApiException {
        ApiResponse<GetTemplates> localVarResp = templatesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get templates list
     * 
     * @return ApiResponse&lt;GetTemplates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTemplates> templatesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = templatesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetTemplates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get templates list (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesListAsync(final ApiCallback<GetTemplates> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetTemplates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
