/*
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetMe401Response;
import org.openapitools.client.model.GetMessages;
import org.openapitools.client.model.ReadMessageRequest;
import org.openapitools.client.model.SendContactRequest;
import org.openapitools.client.model.SendFileRequest;
import org.openapitools.client.model.SendListRequest;
import org.openapitools.client.model.SendLocationRequest;
import org.openapitools.client.model.SendMessageRequest;
import org.openapitools.client.model.SendMessageStatus;
import org.openapitools.client.model.SetMe;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for messagesList
     * @param last Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)
     * @param lastMessageNumber The lastMessageNumber parameter from the last response. Example: 100 (optional)
     * @param firstMessageNumber The firstMessageNumber parameter from the last response. Example: 1 (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)
     * @param minTime Filter messages received after specified time. Example: 1665396610 (optional)
     * @param maxTime Filter messages received before specified time. Example: 1665396610 (optional)
     * @param msgId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesListCall(Boolean last, Integer lastMessageNumber, Integer firstMessageNumber, Integer limit, String chatId, Integer minTime, Integer maxTime, String msgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        if (lastMessageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastMessageNumber", lastMessageNumber));
        }

        if (firstMessageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstMessageNumber", firstMessageNumber));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (chatId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chatId", chatId));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (maxTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_time", maxTime));
        }

        if (msgId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msgId", msgId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesListValidateBeforeCall(Boolean last, Integer lastMessageNumber, Integer firstMessageNumber, Integer limit, String chatId, Integer minTime, Integer maxTime, String msgId, final ApiCallback _callback) throws ApiException {
        return messagesListCall(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId, _callback);

    }

    /**
     * Get messages list
     * 
     * @param last Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)
     * @param lastMessageNumber The lastMessageNumber parameter from the last response. Example: 100 (optional)
     * @param firstMessageNumber The firstMessageNumber parameter from the last response. Example: 1 (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)
     * @param minTime Filter messages received after specified time. Example: 1665396610 (optional)
     * @param maxTime Filter messages received before specified time. Example: 1665396610 (optional)
     * @param msgId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)
     * @return GetMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public GetMessages messagesList(Boolean last, Integer lastMessageNumber, Integer firstMessageNumber, Integer limit, String chatId, Integer minTime, Integer maxTime, String msgId) throws ApiException {
        ApiResponse<GetMessages> localVarResp = messagesListWithHttpInfo(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId);
        return localVarResp.getData();
    }

    /**
     * Get messages list
     * 
     * @param last Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)
     * @param lastMessageNumber The lastMessageNumber parameter from the last response. Example: 100 (optional)
     * @param firstMessageNumber The firstMessageNumber parameter from the last response. Example: 1 (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)
     * @param minTime Filter messages received after specified time. Example: 1665396610 (optional)
     * @param maxTime Filter messages received before specified time. Example: 1665396610 (optional)
     * @param msgId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)
     * @return ApiResponse&lt;GetMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMessages> messagesListWithHttpInfo(Boolean last, Integer lastMessageNumber, Integer firstMessageNumber, Integer limit, String chatId, Integer minTime, Integer maxTime, String msgId) throws ApiException {
        okhttp3.Call localVarCall = messagesListValidateBeforeCall(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId, null);
        Type localVarReturnType = new TypeToken<GetMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get messages list (asynchronously)
     * 
     * @param last Displays the last messages. If this parameter is passed, then lastMessageNumber is ignored. (optional)
     * @param lastMessageNumber The lastMessageNumber parameter from the last response. Example: 100 (optional)
     * @param firstMessageNumber The firstMessageNumber parameter from the last response. Example: 1 (optional)
     * @param limit Sets length of the message list. Default 100. With value 0 returns all messages. (optional)
     * @param chatId Filter messages by chatId  Chat ID from the message list. Example: 556123122026@c.us (optional)
     * @param minTime Filter messages received after specified time. Example: 1665396610 (optional)
     * @param maxTime Filter messages received before specified time. Example: 1665396610 (optional)
     * @param msgId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesListAsync(Boolean last, Integer lastMessageNumber, Integer firstMessageNumber, Integer limit, String chatId, Integer minTime, Integer maxTime, String msgId, final ApiCallback<GetMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesListValidateBeforeCall(last, lastMessageNumber, firstMessageNumber, limit, chatId, minTime, maxTime, msgId, _callback);
        Type localVarReturnType = new TypeToken<GetMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readMessage
     * @param readMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readMessageCall(ReadMessageRequest readMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readMessageRequest;

        // create path and map variables
        String localVarPath = "/readMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readMessageValidateBeforeCall(ReadMessageRequest readMessageRequest, final ApiCallback _callback) throws ApiException {
        return readMessageCall(readMessageRequest, _callback);

    }

    /**
     * Mark message as read
     * 
     * @param readMessageRequest  (optional)
     * @return SetMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public SetMe readMessage(ReadMessageRequest readMessageRequest) throws ApiException {
        ApiResponse<SetMe> localVarResp = readMessageWithHttpInfo(readMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Mark message as read
     * 
     * @param readMessageRequest  (optional)
     * @return ApiResponse&lt;SetMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetMe> readMessageWithHttpInfo(ReadMessageRequest readMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = readMessageValidateBeforeCall(readMessageRequest, null);
        Type localVarReturnType = new TypeToken<SetMe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark message as read (asynchronously)
     * 
     * @param readMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readMessageAsync(ReadMessageRequest readMessageRequest, final ApiCallback<SetMe> _callback) throws ApiException {

        okhttp3.Call localVarCall = readMessageValidateBeforeCall(readMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SetMe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendContact
     * @param sendContactRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactCall(SendContactRequest sendContactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendContactRequest;

        // create path and map variables
        String localVarPath = "/sendContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendContactValidateBeforeCall(SendContactRequest sendContactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendContactRequest' is set
        if (sendContactRequest == null) {
            throw new ApiException("Missing the required parameter 'sendContactRequest' when calling sendContact(Async)");
        }

        return sendContactCall(sendContactRequest, _callback);

    }

    /**
     * Send a Contact
     * Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendContact(SendContactRequest sendContactRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendContactWithHttpInfo(sendContactRequest);
        return localVarResp.getData();
    }

    /**
     * Send a Contact
     * Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendContactWithHttpInfo(SendContactRequest sendContactRequest) throws ApiException {
        okhttp3.Call localVarCall = sendContactValidateBeforeCall(sendContactRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a Contact (asynchronously)
     * Send a contact to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendContactRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactAsync(SendContactRequest sendContactRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendContactValidateBeforeCall(sendContactRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendFile
     * @param sendFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFileCall(SendFileRequest sendFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendFileRequest;

        // create path and map variables
        String localVarPath = "/sendFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendFileValidateBeforeCall(SendFileRequest sendFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendFileRequest' is set
        if (sendFileRequest == null) {
            throw new ApiException("Missing the required parameter 'sendFileRequest' when calling sendFile(Async)");
        }

        return sendFileCall(sendFileRequest, _callback);

    }

    /**
     * Send a File
     * Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendFile(SendFileRequest sendFileRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendFileWithHttpInfo(sendFileRequest);
        return localVarResp.getData();
    }

    /**
     * Send a File
     * Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendFileWithHttpInfo(SendFileRequest sendFileRequest) throws ApiException {
        okhttp3.Call localVarCall = sendFileValidateBeforeCall(sendFileRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a File (asynchronously)
     * Send a file to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFileAsync(SendFileRequest sendFileRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendFileValidateBeforeCall(sendFileRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendList
     * @param sendListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendListCall(SendListRequest sendListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendListRequest;

        // create path and map variables
        String localVarPath = "/sendList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendListValidateBeforeCall(SendListRequest sendListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendListRequest' is set
        if (sendListRequest == null) {
            throw new ApiException("Missing the required parameter 'sendListRequest' when calling sendList(Async)");
        }

        return sendListCall(sendListRequest, _callback);

    }

    /**
     * Send List Message
     * Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendListRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendList(SendListRequest sendListRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendListWithHttpInfo(sendListRequest);
        return localVarResp.getData();
    }

    /**
     * Send List Message
     * Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendListRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendListWithHttpInfo(SendListRequest sendListRequest) throws ApiException {
        okhttp3.Call localVarCall = sendListValidateBeforeCall(sendListRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send List Message (asynchronously)
     * Send Interactive List Message to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendListAsync(SendListRequest sendListRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendListValidateBeforeCall(sendListRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendLocation
     * @param sendLocationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationCall(SendLocationRequest sendLocationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendLocationRequest;

        // create path and map variables
        String localVarPath = "/sendLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendLocationValidateBeforeCall(SendLocationRequest sendLocationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendLocationRequest' is set
        if (sendLocationRequest == null) {
            throw new ApiException("Missing the required parameter 'sendLocationRequest' when calling sendLocation(Async)");
        }

        return sendLocationCall(sendLocationRequest, _callback);

    }

    /**
     * Send a Location
     * Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendLocation(SendLocationRequest sendLocationRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendLocationWithHttpInfo(sendLocationRequest);
        return localVarResp.getData();
    }

    /**
     * Send a Location
     * Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendLocationWithHttpInfo(SendLocationRequest sendLocationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(sendLocationRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a Location (asynchronously)
     * Send a location to an existing chat. (Only if the dialogue has an Open Session). Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendLocationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationAsync(SendLocationRequest sendLocationRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(sendLocationRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param sendMessageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageRequest;

        // create path and map variables
        String localVarPath = "/sendMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendMessageRequest' is set
        if (sendMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'sendMessageRequest' when calling sendMessage(Async)");
        }

        return sendMessageCall(sendMessageRequest, _callback);

    }

    /**
     * Send a Message
     * Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @return SendMessageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageStatus sendMessage(SendMessageRequest sendMessageRequest) throws ApiException {
        ApiResponse<SendMessageStatus> localVarResp = sendMessageWithHttpInfo(sendMessageRequest);
        return localVarResp.getData();
    }

    /**
     * Send a Message
     * Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @return ApiResponse&lt;SendMessageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageStatus> sendMessageWithHttpInfo(SendMessageRequest sendMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a Message (asynchronously)
     * Send a message to an existing chat. (Only if the dialogue has an Open Session). The message will be added to the queue for sending and delivered even if the phone is disconnected from the Internet or authorization is not passed.  Only one of two parameters is needed to determine the destination - chatId or phone.
     * @param sendMessageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(SendMessageRequest sendMessageRequest, final ApiCallback<SendMessageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(sendMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
