/*
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAckInfo;
import org.openapitools.client.model.GetMe401Response;
import org.openapitools.client.model.SetWebhookStatus;
import org.openapitools.client.model.WebhookUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ackHookInfo
     * @param messageId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ackHookInfoCall(String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hookInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messageId", messageId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ackHookInfoValidateBeforeCall(String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling ackHookInfo(Async)");
        }

        return ackHookInfoCall(messageId, _callback);

    }

    /**
     * Check ACKs
     * 
     * @param messageId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (required)
     * @return GetAckInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public GetAckInfo ackHookInfo(String messageId) throws ApiException {
        ApiResponse<GetAckInfo> localVarResp = ackHookInfoWithHttpInfo(messageId);
        return localVarResp.getData();
    }

    /**
     * Check ACKs
     * 
     * @param messageId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (required)
     * @return ApiResponse&lt;GetAckInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAckInfo> ackHookInfoWithHttpInfo(String messageId) throws ApiException {
        okhttp3.Call localVarCall = ackHookInfoValidateBeforeCall(messageId, null);
        Type localVarReturnType = new TypeToken<GetAckInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check ACKs (asynchronously)
     * 
     * @param messageId Message ID. Example: 0XzkmGNn4prUAQlzsHApGNRXQ0U (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ackHookInfoAsync(String messageId, final ApiCallback<GetAckInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = ackHookInfoValidateBeforeCall(messageId, _callback);
        Type localVarReturnType = new TypeToken<GetAckInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setWebhook
     * @param webhookUrl  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setWebhookCall(WebhookUrl webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookUrl;

        // create path and map variables
        String localVarPath = "/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setWebhookValidateBeforeCall(WebhookUrl webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookUrl' is set
        if (webhookUrl == null) {
            throw new ApiException("Missing the required parameter 'webhookUrl' when calling setWebhook(Async)");
        }

        return setWebhookCall(webhookUrl, _callback);

    }

    /**
     * Set webhook
     * Sets the URL for receiving webhook notifications of new messages and message delivery events (ack).  **API responses in \&quot;Callbacks\&quot; tab**
     * @param webhookUrl  (required)
     * @return SetWebhookStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public SetWebhookStatus setWebhook(WebhookUrl webhookUrl) throws ApiException {
        ApiResponse<SetWebhookStatus> localVarResp = setWebhookWithHttpInfo(webhookUrl);
        return localVarResp.getData();
    }

    /**
     * Set webhook
     * Sets the URL for receiving webhook notifications of new messages and message delivery events (ack).  **API responses in \&quot;Callbacks\&quot; tab**
     * @param webhookUrl  (required)
     * @return ApiResponse&lt;SetWebhookStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetWebhookStatus> setWebhookWithHttpInfo(WebhookUrl webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = setWebhookValidateBeforeCall(webhookUrl, null);
        Type localVarReturnType = new TypeToken<SetWebhookStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set webhook (asynchronously)
     * Sets the URL for receiving webhook notifications of new messages and message delivery events (ack).  **API responses in \&quot;Callbacks\&quot; tab**
     * @param webhookUrl  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server response example </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setWebhookAsync(WebhookUrl webhookUrl, final ApiCallback<SetWebhookStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = setWebhookValidateBeforeCall(webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<SetWebhookStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
