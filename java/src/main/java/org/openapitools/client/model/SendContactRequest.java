/*
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.onemessage.JSON;

/**
 * SendContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T20:55:21.249421086+07:00[Asia/Bangkok]")
public class SendContactRequest {
  public static final String SERIALIZED_NAME_CHAT_ID = "chatId";
  @SerializedName(SERIALIZED_NAME_CHAT_ID)
  private String chatId;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Integer phone;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<Object> contacts;

  public SendContactRequest() {
  }

  public SendContactRequest chatId(String chatId) {
    
    this.chatId = chatId;
    return this;
  }

   /**
   * **Required if phone is not set**  Chat ID from the message list. Examples: 12020721369@c.us . Used instead of the phone parameter.
   * @return chatId
  **/
  @javax.annotation.Nullable
  public String getChatId() {
    return chatId;
  }


  public void setChatId(String chatId) {
    this.chatId = chatId;
  }


  public SendContactRequest phone(Integer phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * **Required if chatId is not set**  A phone number starting with the country code. You do not need to add your number.   USA example: 12020721369.
   * @return phone
  **/
  @javax.annotation.Nullable
  public Integer getPhone() {
    return phone;
  }


  public void setPhone(Integer phone) {
    this.phone = phone;
  }


  public SendContactRequest contacts(List<Object> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public SendContactRequest addContactsItem(Object contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Array containing contact objects.  Contact object parameters:  **name** - full contact name. Required. Object with properties:  * formatted_name - Full name, as it normally appears. Example: Lord Adam John Smith Junior. You have to use at least one additional parameter (first_name, last_name, middle_name, suffix, prefix)  * first_name - First name. Example: Adam  * last_name - Last name. Example: Smith  * middle_name - Middle name. Example: John  * suffix - Name suffix. Example: Junior  * prefix - Name prefix. Example: Lord  **birthday** - YYYY-MM-DD formatted string. Example: 2012-08-18  **addresses** - array containing address objects with parameters:  * street - Street number and name. Example: 1 Hacker Way  * city - City name. Example: Menlo Park  * state - State abbreviation. Example: CA  * zip - ZIP code. Example: 94025  * country - Full country name. Example: United States  * country_code - Two-letter country abbreviation. Example: us  * type - Standard Values: HOME, WORK. Example: HOME  **emails** - array containing email objects with parameters:  * email - Email address. Example: test@fb.com  * type - Standard Values: HOME, WORK. Example: WORK  **org** - object containing parameters:  * company - Name of the contact&#39;s company. Example: WhatsApp  * department - Name of the contact&#39;s department. Example: Design  * title - Contact&#39;s business title. Example: Manager  **phones** - array containing phone objects with parameters:  * phone - Automatically populated with the wa_id value as a formatted phone number. Example: +1 (940) 555-1234  * type - Standard Values: CELL, MAIN, IPHONE, HOME, WORK. Example: HOME  * wa_id - WhatsApp ID. Example: 19405551234  **urls** - array containing url objects with parameters:  * url - URL. Example: https://www.facebook.com  * type - Standard Values: HOME, WORK. Example: WORK  Example: [{\&quot;addresses\&quot;:[{\&quot;city\&quot;:\&quot;Menlo Park\&quot;,\&quot;country\&quot;:\&quot;United States\&quot;,\&quot;country_code\&quot;:\&quot;us\&quot;,\&quot;state\&quot;:\&quot;CA\&quot;,\&quot;street\&quot;:\&quot;1 Hacker Way\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;,\&quot;zip\&quot;:\&quot;94025\&quot;},{\&quot;city\&quot;:\&quot;Menlo Park\&quot;,\&quot;country\&quot;:\&quot;United States\&quot;,\&quot;country_code\&quot;:\&quot;us\&quot;,\&quot;state\&quot;:\&quot;CA\&quot;,\&quot;street\&quot;:\&quot;200 Jefferson Dr\&quot;,\&quot;type\&quot;:\&quot;WORK\&quot;,\&quot;zip\&quot;:\&quot;94025\&quot;}],\&quot;birthday\&quot;:\&quot;2012-08-18\&quot;,\&quot;emails\&quot;:[{\&quot;email\&quot;:\&quot;test@fb.com\&quot;,\&quot;type\&quot;:\&quot;WORK\&quot;},{\&quot;email\&quot;:\&quot;test@whatsapp.com\&quot;,\&quot;type\&quot;:\&quot;WORK\&quot;}],\&quot;name\&quot;:{\&quot;first_name\&quot;:\&quot;John\&quot;,\&quot;formatted_name\&quot;:\&quot;John Smith\&quot;,\&quot;last_name\&quot;:\&quot;Smith\&quot;},\&quot;org\&quot;:{\&quot;company\&quot;:\&quot;WhatsApp\&quot;,\&quot;department\&quot;:\&quot;Design\&quot;,\&quot;title\&quot;:\&quot;Manager\&quot;},\&quot;phones\&quot;:[{\&quot;phone\&quot;:\&quot;+1 (940) 555-1234\&quot;,\&quot;type\&quot;:\&quot;HOME\&quot;},{\&quot;phone\&quot;:\&quot;+1 (650) 555-1234\&quot;,\&quot;type\&quot;:\&quot;WORK\&quot;,\&quot;wa_id\&quot;:\&quot;16505551234\&quot;}],\&quot;urls\&quot;:[{\&quot;url\&quot;:\&quot;https://www.facebook.com\&quot;,\&quot;type\&quot;:\&quot;WORK\&quot;}]}]
   * @return contacts
  **/
  @javax.annotation.Nullable
  public List<Object> getContacts() {
    return contacts;
  }


  public void setContacts(List<Object> contacts) {
    this.contacts = contacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendContactRequest sendContactRequest = (SendContactRequest) o;
    return Objects.equals(this.chatId, sendContactRequest.chatId) &&
        Objects.equals(this.phone, sendContactRequest.phone) &&
        Objects.equals(this.contacts, sendContactRequest.contacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chatId, phone, contacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendContactRequest {\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chatId");
    openapiFields.add("phone");
    openapiFields.add("contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SendContactRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendContactRequest is not found in the empty JSON string", SendContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chatId") != null && !jsonObj.get("chatId").isJsonNull()) && !jsonObj.get("chatId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chatId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chatId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull() && !jsonObj.get("contacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendContactRequest>() {
           @Override
           public void write(JsonWriter out, SendContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SendContactRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SendContactRequest
  * @throws IOException if the JSON string is invalid with respect to SendContactRequest
  */
  public static SendContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendContactRequest.class);
  }

 /**
  * Convert an instance of SendContactRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

