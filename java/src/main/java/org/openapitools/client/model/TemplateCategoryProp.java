/*
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Template category
 */
@JsonAdapter(TemplateCategoryProp.Adapter.class)
public enum TemplateCategoryProp {
  
  MARKETING("MARKETING"),
  
  TRANSACTIONAL("TRANSACTIONAL"),
  
  OTP("OTP");

  private String value;

  TemplateCategoryProp(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TemplateCategoryProp fromValue(String value) {
    for (TemplateCategoryProp b : TemplateCategoryProp.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TemplateCategoryProp> {
    @Override
    public void write(final JsonWriter jsonWriter, final TemplateCategoryProp enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TemplateCategoryProp read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TemplateCategoryProp.fromValue(value);
    }
  }
}

