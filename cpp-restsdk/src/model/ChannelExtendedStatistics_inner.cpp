/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ChannelExtendedStatistics_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ChannelExtendedStatistics_inner::ChannelExtendedStatistics_inner()
{
    m_Business_initiated_paid_quantity = 0;
    m_Business_initiated_paid_quantityIsSet = false;
    m_Business_initiated_price = 0.0;
    m_Business_initiated_priceIsSet = false;
    m_Business_initiated_quantity = 0;
    m_Business_initiated_quantityIsSet = false;
    m_Free_entry_point = 0;
    m_Free_entry_pointIsSet = false;
    m_Free_quantity = 0;
    m_Free_quantityIsSet = false;
    m_Free_tier = 0;
    m_Free_tierIsSet = false;
    m_Paid_quantity = 0;
    m_Paid_quantityIsSet = false;
    m_Period_date = utility::conversions::to_string_t("");
    m_Period_dateIsSet = false;
    m_Quantity = 0.0;
    m_QuantityIsSet = false;
    m_Total_price = 0.0;
    m_Total_priceIsSet = false;
    m_User_initiated_paid_quantity = 0;
    m_User_initiated_paid_quantityIsSet = false;
    m_User_initiated_price = 0.0;
    m_User_initiated_priceIsSet = false;
    m_User_initiated_quantity = 0;
    m_User_initiated_quantityIsSet = false;
}

ChannelExtendedStatistics_inner::~ChannelExtendedStatistics_inner()
{
}

void ChannelExtendedStatistics_inner::validate()
{
    // TODO: implement validation
}

web::json::value ChannelExtendedStatistics_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Business_initiated_paid_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("business_initiated_paid_quantity"))] = ModelBase::toJson(m_Business_initiated_paid_quantity);
    }
    if(m_Business_initiated_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("business_initiated_price"))] = ModelBase::toJson(m_Business_initiated_price);
    }
    if(m_Business_initiated_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("business_initiated_quantity"))] = ModelBase::toJson(m_Business_initiated_quantity);
    }
    if(m_Free_entry_pointIsSet)
    {
        val[utility::conversions::to_string_t(U("free_entry_point"))] = ModelBase::toJson(m_Free_entry_point);
    }
    if(m_Free_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("free_quantity"))] = ModelBase::toJson(m_Free_quantity);
    }
    if(m_Free_tierIsSet)
    {
        val[utility::conversions::to_string_t(U("free_tier"))] = ModelBase::toJson(m_Free_tier);
    }
    if(m_Paid_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("paid_quantity"))] = ModelBase::toJson(m_Paid_quantity);
    }
    if(m_Period_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("period_date"))] = ModelBase::toJson(m_Period_date);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("quantity"))] = ModelBase::toJson(m_Quantity);
    }
    if(m_Total_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("total_price"))] = ModelBase::toJson(m_Total_price);
    }
    if(m_User_initiated_paid_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("user_initiated_paid_quantity"))] = ModelBase::toJson(m_User_initiated_paid_quantity);
    }
    if(m_User_initiated_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("user_initiated_price"))] = ModelBase::toJson(m_User_initiated_price);
    }
    if(m_User_initiated_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("user_initiated_quantity"))] = ModelBase::toJson(m_User_initiated_quantity);
    }

    return val;
}

bool ChannelExtendedStatistics_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("business_initiated_paid_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("business_initiated_paid_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBusinessInitiatedPaidQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessInitiatedPaidQuantity);
            setBusinessInitiatedPaidQuantity(refVal_setBusinessInitiatedPaidQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("business_initiated_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("business_initiated_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setBusinessInitiatedPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessInitiatedPrice);
            setBusinessInitiatedPrice(refVal_setBusinessInitiatedPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("business_initiated_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("business_initiated_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBusinessInitiatedQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessInitiatedQuantity);
            setBusinessInitiatedQuantity(refVal_setBusinessInitiatedQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_entry_point"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_entry_point")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFreeEntryPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeEntryPoint);
            setFreeEntryPoint(refVal_setFreeEntryPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFreeQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeQuantity);
            setFreeQuantity(refVal_setFreeQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_tier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_tier")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFreeTier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeTier);
            setFreeTier(refVal_setFreeTier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paid_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paid_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPaidQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaidQuantity);
            setPaidQuantity(refVal_setPaidQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("period_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPeriodDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriodDate);
            setPeriodDate(refVal_setPeriodDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantity")));
        if(!fieldValue.is_null())
        {
            double refVal_setQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantity);
            setQuantity(refVal_setQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotalPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPrice);
            setTotalPrice(refVal_setTotalPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_initiated_paid_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_initiated_paid_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserInitiatedPaidQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserInitiatedPaidQuantity);
            setUserInitiatedPaidQuantity(refVal_setUserInitiatedPaidQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_initiated_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_initiated_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setUserInitiatedPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserInitiatedPrice);
            setUserInitiatedPrice(refVal_setUserInitiatedPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_initiated_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_initiated_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserInitiatedQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserInitiatedQuantity);
            setUserInitiatedQuantity(refVal_setUserInitiatedQuantity);
        }
    }
    return ok;
}

void ChannelExtendedStatistics_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Business_initiated_paid_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("business_initiated_paid_quantity")), m_Business_initiated_paid_quantity));
    }
    if(m_Business_initiated_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("business_initiated_price")), m_Business_initiated_price));
    }
    if(m_Business_initiated_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("business_initiated_quantity")), m_Business_initiated_quantity));
    }
    if(m_Free_entry_pointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_entry_point")), m_Free_entry_point));
    }
    if(m_Free_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_quantity")), m_Free_quantity));
    }
    if(m_Free_tierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_tier")), m_Free_tier));
    }
    if(m_Paid_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paid_quantity")), m_Paid_quantity));
    }
    if(m_Period_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period_date")), m_Period_date));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantity")), m_Quantity));
    }
    if(m_Total_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_price")), m_Total_price));
    }
    if(m_User_initiated_paid_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_initiated_paid_quantity")), m_User_initiated_paid_quantity));
    }
    if(m_User_initiated_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_initiated_price")), m_User_initiated_price));
    }
    if(m_User_initiated_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_initiated_quantity")), m_User_initiated_quantity));
    }
}

bool ChannelExtendedStatistics_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("business_initiated_paid_quantity"))))
    {
        int32_t refVal_setBusinessInitiatedPaidQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("business_initiated_paid_quantity"))), refVal_setBusinessInitiatedPaidQuantity );
        setBusinessInitiatedPaidQuantity(refVal_setBusinessInitiatedPaidQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("business_initiated_price"))))
    {
        double refVal_setBusinessInitiatedPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("business_initiated_price"))), refVal_setBusinessInitiatedPrice );
        setBusinessInitiatedPrice(refVal_setBusinessInitiatedPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("business_initiated_quantity"))))
    {
        int32_t refVal_setBusinessInitiatedQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("business_initiated_quantity"))), refVal_setBusinessInitiatedQuantity );
        setBusinessInitiatedQuantity(refVal_setBusinessInitiatedQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_entry_point"))))
    {
        int32_t refVal_setFreeEntryPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_entry_point"))), refVal_setFreeEntryPoint );
        setFreeEntryPoint(refVal_setFreeEntryPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_quantity"))))
    {
        int32_t refVal_setFreeQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_quantity"))), refVal_setFreeQuantity );
        setFreeQuantity(refVal_setFreeQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_tier"))))
    {
        int32_t refVal_setFreeTier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_tier"))), refVal_setFreeTier );
        setFreeTier(refVal_setFreeTier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paid_quantity"))))
    {
        int32_t refVal_setPaidQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paid_quantity"))), refVal_setPaidQuantity );
        setPaidQuantity(refVal_setPaidQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("period_date"))))
    {
        utility::string_t refVal_setPeriodDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period_date"))), refVal_setPeriodDate );
        setPeriodDate(refVal_setPeriodDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantity"))))
    {
        double refVal_setQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantity"))), refVal_setQuantity );
        setQuantity(refVal_setQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_price"))))
    {
        double refVal_setTotalPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_price"))), refVal_setTotalPrice );
        setTotalPrice(refVal_setTotalPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_initiated_paid_quantity"))))
    {
        int32_t refVal_setUserInitiatedPaidQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_initiated_paid_quantity"))), refVal_setUserInitiatedPaidQuantity );
        setUserInitiatedPaidQuantity(refVal_setUserInitiatedPaidQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_initiated_price"))))
    {
        double refVal_setUserInitiatedPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_initiated_price"))), refVal_setUserInitiatedPrice );
        setUserInitiatedPrice(refVal_setUserInitiatedPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_initiated_quantity"))))
    {
        int32_t refVal_setUserInitiatedQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_initiated_quantity"))), refVal_setUserInitiatedQuantity );
        setUserInitiatedQuantity(refVal_setUserInitiatedQuantity);
    }
    return ok;
}

int32_t ChannelExtendedStatistics_inner::getBusinessInitiatedPaidQuantity() const
{
    return m_Business_initiated_paid_quantity;
}

void ChannelExtendedStatistics_inner::setBusinessInitiatedPaidQuantity(int32_t value)
{
    m_Business_initiated_paid_quantity = value;
    m_Business_initiated_paid_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::businessInitiatedPaidQuantityIsSet() const
{
    return m_Business_initiated_paid_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetBusiness_initiated_paid_quantity()
{
    m_Business_initiated_paid_quantityIsSet = false;
}
double ChannelExtendedStatistics_inner::getBusinessInitiatedPrice() const
{
    return m_Business_initiated_price;
}

void ChannelExtendedStatistics_inner::setBusinessInitiatedPrice(double value)
{
    m_Business_initiated_price = value;
    m_Business_initiated_priceIsSet = true;
}

bool ChannelExtendedStatistics_inner::businessInitiatedPriceIsSet() const
{
    return m_Business_initiated_priceIsSet;
}

void ChannelExtendedStatistics_inner::unsetBusiness_initiated_price()
{
    m_Business_initiated_priceIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getBusinessInitiatedQuantity() const
{
    return m_Business_initiated_quantity;
}

void ChannelExtendedStatistics_inner::setBusinessInitiatedQuantity(int32_t value)
{
    m_Business_initiated_quantity = value;
    m_Business_initiated_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::businessInitiatedQuantityIsSet() const
{
    return m_Business_initiated_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetBusiness_initiated_quantity()
{
    m_Business_initiated_quantityIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getFreeEntryPoint() const
{
    return m_Free_entry_point;
}

void ChannelExtendedStatistics_inner::setFreeEntryPoint(int32_t value)
{
    m_Free_entry_point = value;
    m_Free_entry_pointIsSet = true;
}

bool ChannelExtendedStatistics_inner::freeEntryPointIsSet() const
{
    return m_Free_entry_pointIsSet;
}

void ChannelExtendedStatistics_inner::unsetFree_entry_point()
{
    m_Free_entry_pointIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getFreeQuantity() const
{
    return m_Free_quantity;
}

void ChannelExtendedStatistics_inner::setFreeQuantity(int32_t value)
{
    m_Free_quantity = value;
    m_Free_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::freeQuantityIsSet() const
{
    return m_Free_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetFree_quantity()
{
    m_Free_quantityIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getFreeTier() const
{
    return m_Free_tier;
}

void ChannelExtendedStatistics_inner::setFreeTier(int32_t value)
{
    m_Free_tier = value;
    m_Free_tierIsSet = true;
}

bool ChannelExtendedStatistics_inner::freeTierIsSet() const
{
    return m_Free_tierIsSet;
}

void ChannelExtendedStatistics_inner::unsetFree_tier()
{
    m_Free_tierIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getPaidQuantity() const
{
    return m_Paid_quantity;
}

void ChannelExtendedStatistics_inner::setPaidQuantity(int32_t value)
{
    m_Paid_quantity = value;
    m_Paid_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::paidQuantityIsSet() const
{
    return m_Paid_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetPaid_quantity()
{
    m_Paid_quantityIsSet = false;
}
utility::string_t ChannelExtendedStatistics_inner::getPeriodDate() const
{
    return m_Period_date;
}

void ChannelExtendedStatistics_inner::setPeriodDate(const utility::string_t& value)
{
    m_Period_date = value;
    m_Period_dateIsSet = true;
}

bool ChannelExtendedStatistics_inner::periodDateIsSet() const
{
    return m_Period_dateIsSet;
}

void ChannelExtendedStatistics_inner::unsetPeriod_date()
{
    m_Period_dateIsSet = false;
}
double ChannelExtendedStatistics_inner::getQuantity() const
{
    return m_Quantity;
}

void ChannelExtendedStatistics_inner::setQuantity(double value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetQuantity()
{
    m_QuantityIsSet = false;
}
double ChannelExtendedStatistics_inner::getTotalPrice() const
{
    return m_Total_price;
}

void ChannelExtendedStatistics_inner::setTotalPrice(double value)
{
    m_Total_price = value;
    m_Total_priceIsSet = true;
}

bool ChannelExtendedStatistics_inner::totalPriceIsSet() const
{
    return m_Total_priceIsSet;
}

void ChannelExtendedStatistics_inner::unsetTotal_price()
{
    m_Total_priceIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getUserInitiatedPaidQuantity() const
{
    return m_User_initiated_paid_quantity;
}

void ChannelExtendedStatistics_inner::setUserInitiatedPaidQuantity(int32_t value)
{
    m_User_initiated_paid_quantity = value;
    m_User_initiated_paid_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::userInitiatedPaidQuantityIsSet() const
{
    return m_User_initiated_paid_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetUser_initiated_paid_quantity()
{
    m_User_initiated_paid_quantityIsSet = false;
}
double ChannelExtendedStatistics_inner::getUserInitiatedPrice() const
{
    return m_User_initiated_price;
}

void ChannelExtendedStatistics_inner::setUserInitiatedPrice(double value)
{
    m_User_initiated_price = value;
    m_User_initiated_priceIsSet = true;
}

bool ChannelExtendedStatistics_inner::userInitiatedPriceIsSet() const
{
    return m_User_initiated_priceIsSet;
}

void ChannelExtendedStatistics_inner::unsetUser_initiated_price()
{
    m_User_initiated_priceIsSet = false;
}
int32_t ChannelExtendedStatistics_inner::getUserInitiatedQuantity() const
{
    return m_User_initiated_quantity;
}

void ChannelExtendedStatistics_inner::setUserInitiatedQuantity(int32_t value)
{
    m_User_initiated_quantity = value;
    m_User_initiated_quantityIsSet = true;
}

bool ChannelExtendedStatistics_inner::userInitiatedQuantityIsSet() const
{
    return m_User_initiated_quantityIsSet;
}

void ChannelExtendedStatistics_inner::unsetUser_initiated_quantity()
{
    m_User_initiated_quantityIsSet = false;
}
}
}
}
}


