/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendTemplateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SendTemplateRequest::SendTemplateRequest()
{
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_ChatId = utility::conversions::to_string_t("");
    m_ChatIdIsSet = false;
    m_Phone = 0;
    m_PhoneIsSet = false;
    m_r_template = utility::conversions::to_string_t("");
    m_r_templateIsSet = false;
    m_LanguageIsSet = false;
    m_ParamsIsSet = false;
}

SendTemplateRequest::~SendTemplateRequest()
{
}

void SendTemplateRequest::validate()
{
    // TODO: implement validation
}

web::json::value SendTemplateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t(U("namespace"))] = ModelBase::toJson(m_r_namespace);
    }
    if(m_ChatIdIsSet)
    {
        val[utility::conversions::to_string_t(U("chatId"))] = ModelBase::toJson(m_ChatId);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_r_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("template"))] = ModelBase::toJson(m_r_template);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_ParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("params"))] = ModelBase::toJson(m_Params);
    }

    return val;
}

bool SendTemplateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("namespace"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("namespace")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRNamespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRNamespace);
            setRNamespace(refVal_setRNamespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chatId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chatId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChatId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChatId);
            setChatId(refVal_setChatId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRTemplate);
            setRTemplate(refVal_setRTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendTemplateRequest_allOf_language> refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("params"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("params")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SendTemplateRequest_allOf_params>> refVal_setParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParams);
            setParams(refVal_setParams);
        }
    }
    return ok;
}

void SendTemplateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("namespace")), m_r_namespace));
    }
    if(m_ChatIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chatId")), m_ChatId));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_r_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template")), m_r_template));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_ParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("params")), m_Params));
    }
}

bool SendTemplateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("namespace"))))
    {
        utility::string_t refVal_setRNamespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("namespace"))), refVal_setRNamespace );
        setRNamespace(refVal_setRNamespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chatId"))))
    {
        utility::string_t refVal_setChatId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chatId"))), refVal_setChatId );
        setChatId(refVal_setChatId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        int32_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template"))))
    {
        utility::string_t refVal_setRTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template"))), refVal_setRTemplate );
        setRTemplate(refVal_setRTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        std::shared_ptr<SendTemplateRequest_allOf_language> refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("params"))))
    {
        std::vector<std::shared_ptr<SendTemplateRequest_allOf_params>> refVal_setParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("params"))), refVal_setParams );
        setParams(refVal_setParams);
    }
    return ok;
}

utility::string_t SendTemplateRequest::getRNamespace() const
{
    return m_r_namespace;
}

void SendTemplateRequest::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool SendTemplateRequest::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void SendTemplateRequest::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t SendTemplateRequest::getChatId() const
{
    return m_ChatId;
}

void SendTemplateRequest::setChatId(const utility::string_t& value)
{
    m_ChatId = value;
    m_ChatIdIsSet = true;
}

bool SendTemplateRequest::chatIdIsSet() const
{
    return m_ChatIdIsSet;
}

void SendTemplateRequest::unsetChatId()
{
    m_ChatIdIsSet = false;
}
int32_t SendTemplateRequest::getPhone() const
{
    return m_Phone;
}

void SendTemplateRequest::setPhone(int32_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool SendTemplateRequest::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void SendTemplateRequest::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t SendTemplateRequest::getRTemplate() const
{
    return m_r_template;
}

void SendTemplateRequest::setRTemplate(const utility::string_t& value)
{
    m_r_template = value;
    m_r_templateIsSet = true;
}

bool SendTemplateRequest::rTemplateIsSet() const
{
    return m_r_templateIsSet;
}

void SendTemplateRequest::unsetr_template()
{
    m_r_templateIsSet = false;
}
std::shared_ptr<SendTemplateRequest_allOf_language> SendTemplateRequest::getLanguage() const
{
    return m_Language;
}

void SendTemplateRequest::setLanguage(const std::shared_ptr<SendTemplateRequest_allOf_language>& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool SendTemplateRequest::languageIsSet() const
{
    return m_LanguageIsSet;
}

void SendTemplateRequest::unsetLanguage()
{
    m_LanguageIsSet = false;
}
std::vector<std::shared_ptr<SendTemplateRequest_allOf_params>>& SendTemplateRequest::getParams()
{
    return m_Params;
}

void SendTemplateRequest::setParams(const std::vector<std::shared_ptr<SendTemplateRequest_allOf_params>>& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}

bool SendTemplateRequest::paramsIsSet() const
{
    return m_ParamsIsSet;
}

void SendTemplateRequest::unsetParams()
{
    m_ParamsIsSet = false;
}
}
}
}
}


