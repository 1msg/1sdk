/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GetAckInfo_hooks_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetAckInfo_hooks_inner::GetAckInfo_hooks_inner()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_PricingIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_ConversationIsSet = false;
    m_Recipient_id = utility::conversions::to_string_t("");
    m_Recipient_idIsSet = false;
}

GetAckInfo_hooks_inner::~GetAckInfo_hooks_inner()
{
}

void GetAckInfo_hooks_inner::validate()
{
    // TODO: implement validation
}

web::json::value GetAckInfo_hooks_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_PricingIsSet)
    {
        val[utility::conversions::to_string_t(U("pricing"))] = ModelBase::toJson(m_Pricing);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_ConversationIsSet)
    {
        val[utility::conversions::to_string_t(U("conversation"))] = ModelBase::toJson(m_Conversation);
    }
    if(m_Recipient_idIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient_id"))] = ModelBase::toJson(m_Recipient_id);
    }

    return val;
}

bool GetAckInfo_hooks_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pricing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pricing")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPricing;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPricing);
            setPricing(refVal_setPricing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setConversation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversation);
            setConversation(refVal_setConversation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipientId);
            setRecipientId(refVal_setRecipientId);
        }
    }
    return ok;
}

void GetAckInfo_hooks_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_PricingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pricing")), m_Pricing));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_ConversationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversation")), m_Conversation));
    }
    if(m_Recipient_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient_id")), m_Recipient_id));
    }
}

bool GetAckInfo_hooks_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pricing"))))
    {
        std::shared_ptr<Object> refVal_setPricing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pricing"))), refVal_setPricing );
        setPricing(refVal_setPricing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversation"))))
    {
        std::shared_ptr<Object> refVal_setConversation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversation"))), refVal_setConversation );
        setConversation(refVal_setConversation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient_id"))))
    {
        utility::string_t refVal_setRecipientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient_id"))), refVal_setRecipientId );
        setRecipientId(refVal_setRecipientId);
    }
    return ok;
}

utility::string_t GetAckInfo_hooks_inner::getId() const
{
    return m_Id;
}

void GetAckInfo_hooks_inner::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GetAckInfo_hooks_inner::idIsSet() const
{
    return m_IdIsSet;
}

void GetAckInfo_hooks_inner::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GetAckInfo_hooks_inner::getType() const
{
    return m_Type;
}

void GetAckInfo_hooks_inner::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool GetAckInfo_hooks_inner::typeIsSet() const
{
    return m_TypeIsSet;
}

void GetAckInfo_hooks_inner::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t GetAckInfo_hooks_inner::getStatus() const
{
    return m_Status;
}

void GetAckInfo_hooks_inner::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool GetAckInfo_hooks_inner::statusIsSet() const
{
    return m_StatusIsSet;
}

void GetAckInfo_hooks_inner::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<Object> GetAckInfo_hooks_inner::getPricing() const
{
    return m_Pricing;
}

void GetAckInfo_hooks_inner::setPricing(const std::shared_ptr<Object>& value)
{
    m_Pricing = value;
    m_PricingIsSet = true;
}

bool GetAckInfo_hooks_inner::pricingIsSet() const
{
    return m_PricingIsSet;
}

void GetAckInfo_hooks_inner::unsetPricing()
{
    m_PricingIsSet = false;
}
utility::string_t GetAckInfo_hooks_inner::getTimestamp() const
{
    return m_Timestamp;
}

void GetAckInfo_hooks_inner::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool GetAckInfo_hooks_inner::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void GetAckInfo_hooks_inner::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::shared_ptr<Object> GetAckInfo_hooks_inner::getConversation() const
{
    return m_Conversation;
}

void GetAckInfo_hooks_inner::setConversation(const std::shared_ptr<Object>& value)
{
    m_Conversation = value;
    m_ConversationIsSet = true;
}

bool GetAckInfo_hooks_inner::conversationIsSet() const
{
    return m_ConversationIsSet;
}

void GetAckInfo_hooks_inner::unsetConversation()
{
    m_ConversationIsSet = false;
}
utility::string_t GetAckInfo_hooks_inner::getRecipientId() const
{
    return m_Recipient_id;
}

void GetAckInfo_hooks_inner::setRecipientId(const utility::string_t& value)
{
    m_Recipient_id = value;
    m_Recipient_idIsSet = true;
}

bool GetAckInfo_hooks_inner::recipientIdIsSet() const
{
    return m_Recipient_idIsSet;
}

void GetAckInfo_hooks_inner::unsetRecipient_id()
{
    m_Recipient_idIsSet = false;
}
}
}
}
}


