/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GetMe.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetMe::GetMe()
{
    m_About = utility::conversions::to_string_t("");
    m_AboutIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Vertical = utility::conversions::to_string_t("");
    m_VerticalIsSet = false;
    m_Photo = utility::conversions::to_string_t("");
    m_PhotoIsSet = false;
}

GetMe::~GetMe()
{
}

void GetMe::validate()
{
    // TODO: implement validation
}

web::json::value GetMe::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AboutIsSet)
    {
        val[utility::conversions::to_string_t(U("about"))] = ModelBase::toJson(m_About);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_VerticalIsSet)
    {
        val[utility::conversions::to_string_t(U("vertical"))] = ModelBase::toJson(m_Vertical);
    }
    if(m_PhotoIsSet)
    {
        val[utility::conversions::to_string_t(U("photo"))] = ModelBase::toJson(m_Photo);
    }

    return val;
}

bool GetMe::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("about"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("about")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAbout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAbout);
            setAbout(refVal_setAbout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vertical"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vertical")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVertical;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVertical);
            setVertical(refVal_setVertical);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("photo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("photo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoto;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoto);
            setPhoto(refVal_setPhoto);
        }
    }
    return ok;
}

void GetMe::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AboutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("about")), m_About));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_VerticalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vertical")), m_Vertical));
    }
    if(m_PhotoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("photo")), m_Photo));
    }
}

bool GetMe::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("about"))))
    {
        utility::string_t refVal_setAbout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("about"))), refVal_setAbout );
        setAbout(refVal_setAbout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        utility::string_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vertical"))))
    {
        utility::string_t refVal_setVertical;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vertical"))), refVal_setVertical );
        setVertical(refVal_setVertical);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("photo"))))
    {
        utility::string_t refVal_setPhoto;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("photo"))), refVal_setPhoto );
        setPhoto(refVal_setPhoto);
    }
    return ok;
}

utility::string_t GetMe::getAbout() const
{
    return m_About;
}

void GetMe::setAbout(const utility::string_t& value)
{
    m_About = value;
    m_AboutIsSet = true;
}

bool GetMe::aboutIsSet() const
{
    return m_AboutIsSet;
}

void GetMe::unsetAbout()
{
    m_AboutIsSet = false;
}
utility::string_t GetMe::getAddress() const
{
    return m_Address;
}

void GetMe::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool GetMe::addressIsSet() const
{
    return m_AddressIsSet;
}

void GetMe::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t GetMe::getDescription() const
{
    return m_Description;
}

void GetMe::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GetMe::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GetMe::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t GetMe::getEmail() const
{
    return m_Email;
}

void GetMe::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool GetMe::emailIsSet() const
{
    return m_EmailIsSet;
}

void GetMe::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t GetMe::getPhone() const
{
    return m_Phone;
}

void GetMe::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool GetMe::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void GetMe::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t GetMe::getVertical() const
{
    return m_Vertical;
}

void GetMe::setVertical(const utility::string_t& value)
{
    m_Vertical = value;
    m_VerticalIsSet = true;
}

bool GetMe::verticalIsSet() const
{
    return m_VerticalIsSet;
}

void GetMe::unsetVertical()
{
    m_VerticalIsSet = false;
}
utility::string_t GetMe::getPhoto() const
{
    return m_Photo;
}

void GetMe::setPhoto(const utility::string_t& value)
{
    m_Photo = value;
    m_PhotoIsSet = true;
}

bool GetMe::photoIsSet() const
{
    return m_PhotoIsSet;
}

void GetMe::unsetPhoto()
{
    m_PhotoIsSet = false;
}
}
}
}
}


