/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendTemplateRequest_allOf_date_time_component.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SendTemplateRequest_allOf_date_time_component::SendTemplateRequest_allOf_date_time_component()
{
    m_Day_of_week = utility::conversions::to_string_t("");
    m_Day_of_weekIsSet = false;
    m_Year = 0;
    m_YearIsSet = false;
    m_Month = 0;
    m_MonthIsSet = false;
    m_Day_of_month = 0;
    m_Day_of_monthIsSet = false;
    m_Hour = 0;
    m_HourIsSet = false;
    m_Minute = 0;
    m_MinuteIsSet = false;
    m_Calendar = utility::conversions::to_string_t("");
    m_CalendarIsSet = false;
}

SendTemplateRequest_allOf_date_time_component::~SendTemplateRequest_allOf_date_time_component()
{
}

void SendTemplateRequest_allOf_date_time_component::validate()
{
    // TODO: implement validation
}

web::json::value SendTemplateRequest_allOf_date_time_component::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Day_of_weekIsSet)
    {
        val[utility::conversions::to_string_t(U("day_of_week"))] = ModelBase::toJson(m_Day_of_week);
    }
    if(m_YearIsSet)
    {
        val[utility::conversions::to_string_t(U("year"))] = ModelBase::toJson(m_Year);
    }
    if(m_MonthIsSet)
    {
        val[utility::conversions::to_string_t(U("month"))] = ModelBase::toJson(m_Month);
    }
    if(m_Day_of_monthIsSet)
    {
        val[utility::conversions::to_string_t(U("day_of_month"))] = ModelBase::toJson(m_Day_of_month);
    }
    if(m_HourIsSet)
    {
        val[utility::conversions::to_string_t(U("hour"))] = ModelBase::toJson(m_Hour);
    }
    if(m_MinuteIsSet)
    {
        val[utility::conversions::to_string_t(U("minute"))] = ModelBase::toJson(m_Minute);
    }
    if(m_CalendarIsSet)
    {
        val[utility::conversions::to_string_t(U("calendar"))] = ModelBase::toJson(m_Calendar);
    }

    return val;
}

bool SendTemplateRequest_allOf_date_time_component::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("day_of_week"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("day_of_week")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDayOfWeek;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDayOfWeek);
            setDayOfWeek(refVal_setDayOfWeek);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("year"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("year")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setYear;
            ok &= ModelBase::fromJson(fieldValue, refVal_setYear);
            setYear(refVal_setYear);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("month"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("month")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMonth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMonth);
            setMonth(refVal_setMonth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("day_of_month"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("day_of_month")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDayOfMonth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDayOfMonth);
            setDayOfMonth(refVal_setDayOfMonth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hour"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hour")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHour;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHour);
            setHour(refVal_setHour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minute")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinute);
            setMinute(refVal_setMinute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("calendar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("calendar")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCalendar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCalendar);
            setCalendar(refVal_setCalendar);
        }
    }
    return ok;
}

void SendTemplateRequest_allOf_date_time_component::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Day_of_weekIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("day_of_week")), m_Day_of_week));
    }
    if(m_YearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("year")), m_Year));
    }
    if(m_MonthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("month")), m_Month));
    }
    if(m_Day_of_monthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("day_of_month")), m_Day_of_month));
    }
    if(m_HourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hour")), m_Hour));
    }
    if(m_MinuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minute")), m_Minute));
    }
    if(m_CalendarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("calendar")), m_Calendar));
    }
}

bool SendTemplateRequest_allOf_date_time_component::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("day_of_week"))))
    {
        utility::string_t refVal_setDayOfWeek;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("day_of_week"))), refVal_setDayOfWeek );
        setDayOfWeek(refVal_setDayOfWeek);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("year"))))
    {
        int32_t refVal_setYear;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("year"))), refVal_setYear );
        setYear(refVal_setYear);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("month"))))
    {
        int32_t refVal_setMonth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("month"))), refVal_setMonth );
        setMonth(refVal_setMonth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("day_of_month"))))
    {
        int32_t refVal_setDayOfMonth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("day_of_month"))), refVal_setDayOfMonth );
        setDayOfMonth(refVal_setDayOfMonth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hour"))))
    {
        int32_t refVal_setHour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hour"))), refVal_setHour );
        setHour(refVal_setHour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minute"))))
    {
        int32_t refVal_setMinute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minute"))), refVal_setMinute );
        setMinute(refVal_setMinute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("calendar"))))
    {
        utility::string_t refVal_setCalendar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("calendar"))), refVal_setCalendar );
        setCalendar(refVal_setCalendar);
    }
    return ok;
}

utility::string_t SendTemplateRequest_allOf_date_time_component::getDayOfWeek() const
{
    return m_Day_of_week;
}

void SendTemplateRequest_allOf_date_time_component::setDayOfWeek(const utility::string_t& value)
{
    m_Day_of_week = value;
    m_Day_of_weekIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::dayOfWeekIsSet() const
{
    return m_Day_of_weekIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetDay_of_week()
{
    m_Day_of_weekIsSet = false;
}
int32_t SendTemplateRequest_allOf_date_time_component::getYear() const
{
    return m_Year;
}

void SendTemplateRequest_allOf_date_time_component::setYear(int32_t value)
{
    m_Year = value;
    m_YearIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::yearIsSet() const
{
    return m_YearIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetYear()
{
    m_YearIsSet = false;
}
int32_t SendTemplateRequest_allOf_date_time_component::getMonth() const
{
    return m_Month;
}

void SendTemplateRequest_allOf_date_time_component::setMonth(int32_t value)
{
    m_Month = value;
    m_MonthIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::monthIsSet() const
{
    return m_MonthIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetMonth()
{
    m_MonthIsSet = false;
}
int32_t SendTemplateRequest_allOf_date_time_component::getDayOfMonth() const
{
    return m_Day_of_month;
}

void SendTemplateRequest_allOf_date_time_component::setDayOfMonth(int32_t value)
{
    m_Day_of_month = value;
    m_Day_of_monthIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::dayOfMonthIsSet() const
{
    return m_Day_of_monthIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetDay_of_month()
{
    m_Day_of_monthIsSet = false;
}
int32_t SendTemplateRequest_allOf_date_time_component::getHour() const
{
    return m_Hour;
}

void SendTemplateRequest_allOf_date_time_component::setHour(int32_t value)
{
    m_Hour = value;
    m_HourIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::hourIsSet() const
{
    return m_HourIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetHour()
{
    m_HourIsSet = false;
}
int32_t SendTemplateRequest_allOf_date_time_component::getMinute() const
{
    return m_Minute;
}

void SendTemplateRequest_allOf_date_time_component::setMinute(int32_t value)
{
    m_Minute = value;
    m_MinuteIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::minuteIsSet() const
{
    return m_MinuteIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetMinute()
{
    m_MinuteIsSet = false;
}
utility::string_t SendTemplateRequest_allOf_date_time_component::getCalendar() const
{
    return m_Calendar;
}

void SendTemplateRequest_allOf_date_time_component::setCalendar(const utility::string_t& value)
{
    m_Calendar = value;
    m_CalendarIsSet = true;
}

bool SendTemplateRequest_allOf_date_time_component::calendarIsSet() const
{
    return m_CalendarIsSet;
}

void SendTemplateRequest_allOf_date_time_component::unsetCalendar()
{
    m_CalendarIsSet = false;
}
}
}
}
}


