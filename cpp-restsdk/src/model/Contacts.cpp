/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Contacts.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Contacts::Contacts()
{
    m_ContactsIsSet = false;
}

Contacts::~Contacts()
{
}

void Contacts::validate()
{
    // TODO: implement validation
}

web::json::value Contacts::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ContactsIsSet)
    {
        val[utility::conversions::to_string_t(U("contacts"))] = ModelBase::toJson(m_Contacts);
    }

    return val;
}

bool Contacts::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("contacts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contacts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Contacts_contacts_inner>> refVal_setContacts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContacts);
            setContacts(refVal_setContacts);
        }
    }
    return ok;
}

void Contacts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contacts")), m_Contacts));
    }
}

bool Contacts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("contacts"))))
    {
        std::vector<std::shared_ptr<Contacts_contacts_inner>> refVal_setContacts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contacts"))), refVal_setContacts );
        setContacts(refVal_setContacts);
    }
    return ok;
}

std::vector<std::shared_ptr<Contacts_contacts_inner>>& Contacts::getContacts()
{
    return m_Contacts;
}

void Contacts::setContacts(const std::vector<std::shared_ptr<Contacts_contacts_inner>>& value)
{
    m_Contacts = value;
    m_ContactsIsSet = true;
}

bool Contacts::contactsIsSet() const
{
    return m_ContactsIsSet;
}

void Contacts::unsetContacts()
{
    m_ContactsIsSet = false;
}
}
}
}
}


