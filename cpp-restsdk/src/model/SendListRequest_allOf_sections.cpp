/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendListRequest_allOf_sections.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SendListRequest_allOf_sections::SendListRequest_allOf_sections()
{
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_RowsIsSet = false;
}

SendListRequest_allOf_sections::~SendListRequest_allOf_sections()
{
}

void SendListRequest_allOf_sections::validate()
{
    // TODO: implement validation
}

web::json::value SendListRequest_allOf_sections::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_RowsIsSet)
    {
        val[utility::conversions::to_string_t(U("rows"))] = ModelBase::toJson(m_Rows);
    }

    return val;
}

bool SendListRequest_allOf_sections::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rows")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SendListRequest_allOf_rows>> refVal_setRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRows);
            setRows(refVal_setRows);
        }
    }
    return ok;
}

void SendListRequest_allOf_sections::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_RowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rows")), m_Rows));
    }
}

bool SendListRequest_allOf_sections::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rows"))))
    {
        std::vector<std::shared_ptr<SendListRequest_allOf_rows>> refVal_setRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rows"))), refVal_setRows );
        setRows(refVal_setRows);
    }
    return ok;
}

utility::string_t SendListRequest_allOf_sections::getTitle() const
{
    return m_Title;
}

void SendListRequest_allOf_sections::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool SendListRequest_allOf_sections::titleIsSet() const
{
    return m_TitleIsSet;
}

void SendListRequest_allOf_sections::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<std::shared_ptr<SendListRequest_allOf_rows>>& SendListRequest_allOf_sections::getRows()
{
    return m_Rows;
}

void SendListRequest_allOf_sections::setRows(const std::vector<std::shared_ptr<SendListRequest_allOf_rows>>& value)
{
    m_Rows = value;
    m_RowsIsSet = true;
}

bool SendListRequest_allOf_sections::rowsIsSet() const
{
    return m_RowsIsSet;
}

void SendListRequest_allOf_sections::unsetRows()
{
    m_RowsIsSet = false;
}
}
}
}
}


