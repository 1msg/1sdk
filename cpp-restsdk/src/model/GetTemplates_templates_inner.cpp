/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GetTemplates_templates_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetTemplates_templates_inner::GetTemplates_templates_inner()
{
    m_CategoryIsSet = false;
    m_ComponentsIsSet = false;
    m_LanguageIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_Rejected_reason = utility::conversions::to_string_t("");
    m_Rejected_reasonIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

GetTemplates_templates_inner::~GetTemplates_templates_inner()
{
}

void GetTemplates_templates_inner::validate()
{
    // TODO: implement validation
}

web::json::value GetTemplates_templates_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_ComponentsIsSet)
    {
        val[utility::conversions::to_string_t(U("components"))] = ModelBase::toJson(m_Components);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t(U("namespace"))] = ModelBase::toJson(m_r_namespace);
    }
    if(m_Rejected_reasonIsSet)
    {
        val[utility::conversions::to_string_t(U("rejected_reason"))] = ModelBase::toJson(m_Rejected_reason);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool GetTemplates_templates_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateCategoryProp> refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("components"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("components")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateComponentsProp> refVal_setComponents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComponents);
            setComponents(refVal_setComponents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateLanguageProp> refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("namespace"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("namespace")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRNamespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRNamespace);
            setRNamespace(refVal_setRNamespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejected_reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejected_reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRejectedReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectedReason);
            setRejectedReason(refVal_setRejectedReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void GetTemplates_templates_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_ComponentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("components")), m_Components));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("namespace")), m_r_namespace));
    }
    if(m_Rejected_reasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejected_reason")), m_Rejected_reason));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool GetTemplates_templates_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        std::shared_ptr<TemplateCategoryProp> refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("components"))))
    {
        std::shared_ptr<TemplateComponentsProp> refVal_setComponents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("components"))), refVal_setComponents );
        setComponents(refVal_setComponents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        std::shared_ptr<TemplateLanguageProp> refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("namespace"))))
    {
        utility::string_t refVal_setRNamespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("namespace"))), refVal_setRNamespace );
        setRNamespace(refVal_setRNamespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejected_reason"))))
    {
        utility::string_t refVal_setRejectedReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejected_reason"))), refVal_setRejectedReason );
        setRejectedReason(refVal_setRejectedReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

std::shared_ptr<TemplateCategoryProp> GetTemplates_templates_inner::getCategory() const
{
    return m_Category;
}

void GetTemplates_templates_inner::setCategory(const std::shared_ptr<TemplateCategoryProp>& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool GetTemplates_templates_inner::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void GetTemplates_templates_inner::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::shared_ptr<TemplateComponentsProp> GetTemplates_templates_inner::getComponents() const
{
    return m_Components;
}

void GetTemplates_templates_inner::setComponents(const std::shared_ptr<TemplateComponentsProp>& value)
{
    m_Components = value;
    m_ComponentsIsSet = true;
}

bool GetTemplates_templates_inner::componentsIsSet() const
{
    return m_ComponentsIsSet;
}

void GetTemplates_templates_inner::unsetComponents()
{
    m_ComponentsIsSet = false;
}
std::shared_ptr<TemplateLanguageProp> GetTemplates_templates_inner::getLanguage() const
{
    return m_Language;
}

void GetTemplates_templates_inner::setLanguage(const std::shared_ptr<TemplateLanguageProp>& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool GetTemplates_templates_inner::languageIsSet() const
{
    return m_LanguageIsSet;
}

void GetTemplates_templates_inner::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t GetTemplates_templates_inner::getName() const
{
    return m_Name;
}

void GetTemplates_templates_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GetTemplates_templates_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void GetTemplates_templates_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t GetTemplates_templates_inner::getRNamespace() const
{
    return m_r_namespace;
}

void GetTemplates_templates_inner::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool GetTemplates_templates_inner::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void GetTemplates_templates_inner::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t GetTemplates_templates_inner::getRejectedReason() const
{
    return m_Rejected_reason;
}

void GetTemplates_templates_inner::setRejectedReason(const utility::string_t& value)
{
    m_Rejected_reason = value;
    m_Rejected_reasonIsSet = true;
}

bool GetTemplates_templates_inner::rejectedReasonIsSet() const
{
    return m_Rejected_reasonIsSet;
}

void GetTemplates_templates_inner::unsetRejected_reason()
{
    m_Rejected_reasonIsSet = false;
}
utility::string_t GetTemplates_templates_inner::getStatus() const
{
    return m_Status;
}

void GetTemplates_templates_inner::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool GetTemplates_templates_inner::statusIsSet() const
{
    return m_StatusIsSet;
}

void GetTemplates_templates_inner::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


