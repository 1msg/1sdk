/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GetCommerce_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetCommerce_inner::GetCommerce_inner()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Is_cart_enabled = false;
    m_Is_cart_enabledIsSet = false;
    m_Is_catalog_visible = false;
    m_Is_catalog_visibleIsSet = false;
}

GetCommerce_inner::~GetCommerce_inner()
{
}

void GetCommerce_inner::validate()
{
    // TODO: implement validation
}

web::json::value GetCommerce_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Is_cart_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("is_cart_enabled"))] = ModelBase::toJson(m_Is_cart_enabled);
    }
    if(m_Is_catalog_visibleIsSet)
    {
        val[utility::conversions::to_string_t(U("is_catalog_visible"))] = ModelBase::toJson(m_Is_catalog_visible);
    }

    return val;
}

bool GetCommerce_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_cart_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_cart_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsCartEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsCartEnabled);
            setIsCartEnabled(refVal_setIsCartEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_catalog_visible"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_catalog_visible")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsCatalogVisible;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsCatalogVisible);
            setIsCatalogVisible(refVal_setIsCatalogVisible);
        }
    }
    return ok;
}

void GetCommerce_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Is_cart_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_cart_enabled")), m_Is_cart_enabled));
    }
    if(m_Is_catalog_visibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_catalog_visible")), m_Is_catalog_visible));
    }
}

bool GetCommerce_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_cart_enabled"))))
    {
        bool refVal_setIsCartEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_cart_enabled"))), refVal_setIsCartEnabled );
        setIsCartEnabled(refVal_setIsCartEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_catalog_visible"))))
    {
        bool refVal_setIsCatalogVisible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_catalog_visible"))), refVal_setIsCatalogVisible );
        setIsCatalogVisible(refVal_setIsCatalogVisible);
    }
    return ok;
}

utility::string_t GetCommerce_inner::getId() const
{
    return m_Id;
}

void GetCommerce_inner::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GetCommerce_inner::idIsSet() const
{
    return m_IdIsSet;
}

void GetCommerce_inner::unsetId()
{
    m_IdIsSet = false;
}
bool GetCommerce_inner::isIsCartEnabled() const
{
    return m_Is_cart_enabled;
}

void GetCommerce_inner::setIsCartEnabled(bool value)
{
    m_Is_cart_enabled = value;
    m_Is_cart_enabledIsSet = true;
}

bool GetCommerce_inner::isCartEnabledIsSet() const
{
    return m_Is_cart_enabledIsSet;
}

void GetCommerce_inner::unsetIs_cart_enabled()
{
    m_Is_cart_enabledIsSet = false;
}
bool GetCommerce_inner::isIsCatalogVisible() const
{
    return m_Is_catalog_visible;
}

void GetCommerce_inner::setIsCatalogVisible(bool value)
{
    m_Is_catalog_visible = value;
    m_Is_catalog_visibleIsSet = true;
}

bool GetCommerce_inner::isCatalogVisibleIsSet() const
{
    return m_Is_catalog_visibleIsSet;
}

void GetCommerce_inner::unsetIs_catalog_visible()
{
    m_Is_catalog_visibleIsSet = false;
}
}
}
}
}


