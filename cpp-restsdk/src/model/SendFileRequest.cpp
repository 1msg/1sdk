/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendFileRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SendFileRequest::SendFileRequest()
{
    m_ChatId = utility::conversions::to_string_t("");
    m_ChatIdIsSet = false;
    m_Phone = 0;
    m_PhoneIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_Caption = utility::conversions::to_string_t("");
    m_CaptionIsSet = false;
}

SendFileRequest::~SendFileRequest()
{
}

void SendFileRequest::validate()
{
    // TODO: implement validation
}

web::json::value SendFileRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChatIdIsSet)
    {
        val[utility::conversions::to_string_t(U("chatId"))] = ModelBase::toJson(m_ChatId);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t(U("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_CaptionIsSet)
    {
        val[utility::conversions::to_string_t(U("caption"))] = ModelBase::toJson(m_Caption);
    }

    return val;
}

bool SendFileRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("chatId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chatId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChatId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChatId);
            setChatId(refVal_setChatId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("caption"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("caption")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCaption;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCaption);
            setCaption(refVal_setCaption);
        }
    }
    return ok;
}

void SendFileRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ChatIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chatId")), m_ChatId));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filename")), m_Filename));
    }
    if(m_CaptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("caption")), m_Caption));
    }
}

bool SendFileRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("chatId"))))
    {
        utility::string_t refVal_setChatId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chatId"))), refVal_setChatId );
        setChatId(refVal_setChatId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        int32_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("caption"))))
    {
        utility::string_t refVal_setCaption;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("caption"))), refVal_setCaption );
        setCaption(refVal_setCaption);
    }
    return ok;
}

utility::string_t SendFileRequest::getChatId() const
{
    return m_ChatId;
}

void SendFileRequest::setChatId(const utility::string_t& value)
{
    m_ChatId = value;
    m_ChatIdIsSet = true;
}

bool SendFileRequest::chatIdIsSet() const
{
    return m_ChatIdIsSet;
}

void SendFileRequest::unsetChatId()
{
    m_ChatIdIsSet = false;
}
int32_t SendFileRequest::getPhone() const
{
    return m_Phone;
}

void SendFileRequest::setPhone(int32_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool SendFileRequest::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void SendFileRequest::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t SendFileRequest::getBody() const
{
    return m_Body;
}

void SendFileRequest::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SendFileRequest::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SendFileRequest::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t SendFileRequest::getFilename() const
{
    return m_Filename;
}

void SendFileRequest::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool SendFileRequest::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void SendFileRequest::unsetFilename()
{
    m_FilenameIsSet = false;
}
utility::string_t SendFileRequest::getCaption() const
{
    return m_Caption;
}

void SendFileRequest::setCaption(const utility::string_t& value)
{
    m_Caption = value;
    m_CaptionIsSet = true;
}

bool SendFileRequest::captionIsSet() const
{
    return m_CaptionIsSet;
}

void SendFileRequest::unsetCaption()
{
    m_CaptionIsSet = false;
}
}
}
}
}


