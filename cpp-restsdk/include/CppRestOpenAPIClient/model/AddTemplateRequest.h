/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AddTemplateRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AddTemplateRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AddTemplateRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TemplateComponentsProp.h"
#include "CppRestOpenAPIClient/model/TemplateCategoryProp.h"
#include "CppRestOpenAPIClient/model/TemplateLanguageProp.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AddTemplateRequest
    : public ModelBase
{
public:
    AddTemplateRequest();
    virtual ~AddTemplateRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AddTemplateRequest members

    /// <summary>
    /// Name of template
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TemplateCategoryProp> getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const std::shared_ptr<TemplateCategoryProp>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TemplateComponentsProp> getComponents() const;
    bool componentsIsSet() const;
    void unsetComponents();

    void setComponents(const std::shared_ptr<TemplateComponentsProp>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TemplateLanguageProp> getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const std::shared_ptr<TemplateLanguageProp>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<TemplateCategoryProp> m_Category;
    bool m_CategoryIsSet;
    std::shared_ptr<TemplateComponentsProp> m_Components;
    bool m_ComponentsIsSet;
    std::shared_ptr<TemplateLanguageProp> m_Language;
    bool m_LanguageIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AddTemplateRequest_H_ */
