/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetMessages_messages_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetMessages_messages_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetMessages_messages_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  GetMessages_messages_inner
    : public ModelBase
{
public:
    GetMessages_messages_inner();
    virtual ~GetMessages_messages_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetMessages_messages_inner members

    /// <summary>
    /// 
    /// </summary>
    int32_t getMessageNumber() const;
    bool messageNumberIsSet() const;
    void unsetMessageNumber();

    void setMessageNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isFromMe() const;
    bool fromMeIsSet() const;
    void unsetFromMe();

    void setFromMe(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSelf() const;
    bool selfIsSet() const;
    void unsetSelf();

    void setSelf(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getIsForwarded() const;
    bool isForwardedIsSet() const;
    void unsetIsForwarded();

    void setIsForwarded(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAuthor() const;
    bool authorIsSet() const;
    void unsetAuthor();

    void setAuthor(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getChatId() const;
    bool chatIdIsSet() const;
    void unsetChatId();

    void setChatId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSenderName() const;
    bool senderNameIsSet() const;
    void unsetSenderName();

    void setSenderName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCaption() const;
    bool captionIsSet() const;
    void unsetCaption();

    void setCaption(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQuotedMsgId() const;
    bool quotedMsgIdIsSet() const;
    void unsetQuotedMsgId();

    void setQuotedMsgId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getChatName() const;
    bool chatNameIsSet() const;
    void unsetChatName();

    void setChatName(const utility::string_t& value);


protected:
    int32_t m_MessageNumber;
    bool m_MessageNumberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Body;
    bool m_BodyIsSet;
    bool m_FromMe;
    bool m_FromMeIsSet;
    int32_t m_Self;
    bool m_SelfIsSet;
    int32_t m_IsForwarded;
    bool m_IsForwardedIsSet;
    utility::string_t m_Author;
    bool m_AuthorIsSet;
    int32_t m_Time;
    bool m_TimeIsSet;
    utility::string_t m_ChatId;
    bool m_ChatIdIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_SenderName;
    bool m_SenderNameIsSet;
    utility::string_t m_Caption;
    bool m_CaptionIsSet;
    utility::string_t m_QuotedMsgId;
    bool m_QuotedMsgIdIsSet;
    std::shared_ptr<Object> m_Metadata;
    bool m_MetadataIsSet;
    utility::string_t m_ChatName;
    bool m_ChatNameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetMessages_messages_inner_H_ */
