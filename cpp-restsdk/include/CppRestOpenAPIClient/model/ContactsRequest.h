/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContactsRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ContactsRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ContactsRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ContactsRequest
    : public ModelBase
{
public:
    ContactsRequest();
    virtual ~ContactsRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ContactsRequest members

    /// <summary>
    /// Operating mode:  *wait* - synchronous  *no_wait* - asynchronous (default)
    /// </summary>
    utility::string_t getBlocking() const;
    bool blockingIsSet() const;
    void unsetBlocking();

    void setBlocking(const utility::string_t& value);

    /// <summary>
    /// Using cache:  *true* - ignore cache  *false* - use cache (default)
    /// </summary>
    bool isForceCheck() const;
    bool forceCheckIsSet() const;
    void unsetForce_check();

    void setForceCheck(bool value);

    /// <summary>
    /// Array of contact numbers for checking. Recommended format is +16315551001  Example:  [\&quot;16315551000\&quot;,\&quot;+1 631 555 1001\&quot;,\&quot;6315551002\&quot;,\&quot;+1 (631) 555-1004\&quot;,\&quot;1-631-555-1005\&quot;]
    /// </summary>
    std::vector<utility::string_t>& getContacts();
    bool contactsIsSet() const;
    void unsetContacts();

    void setContacts(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Blocking;
    bool m_BlockingIsSet;
    bool m_Force_check;
    bool m_Force_checkIsSet;
    std::vector<utility::string_t> m_Contacts;
    bool m_ContactsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ContactsRequest_H_ */
