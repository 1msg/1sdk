/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChannelExtendedStatistics_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChannelExtendedStatistics_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChannelExtendedStatistics_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ChannelExtendedStatistics_inner
    : public ModelBase
{
public:
    ChannelExtendedStatistics_inner();
    virtual ~ChannelExtendedStatistics_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChannelExtendedStatistics_inner members

    /// <summary>
    /// 
    /// </summary>
    int32_t getBusinessInitiatedPaidQuantity() const;
    bool businessInitiatedPaidQuantityIsSet() const;
    void unsetBusiness_initiated_paid_quantity();

    void setBusinessInitiatedPaidQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getBusinessInitiatedPrice() const;
    bool businessInitiatedPriceIsSet() const;
    void unsetBusiness_initiated_price();

    void setBusinessInitiatedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBusinessInitiatedQuantity() const;
    bool businessInitiatedQuantityIsSet() const;
    void unsetBusiness_initiated_quantity();

    void setBusinessInitiatedQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFreeEntryPoint() const;
    bool freeEntryPointIsSet() const;
    void unsetFree_entry_point();

    void setFreeEntryPoint(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFreeQuantity() const;
    bool freeQuantityIsSet() const;
    void unsetFree_quantity();

    void setFreeQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFreeTier() const;
    bool freeTierIsSet() const;
    void unsetFree_tier();

    void setFreeTier(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPaidQuantity() const;
    bool paidQuantityIsSet() const;
    void unsetPaid_quantity();

    void setPaidQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPeriodDate() const;
    bool periodDateIsSet() const;
    void unsetPeriod_date();

    void setPeriodDate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getQuantity() const;
    bool quantityIsSet() const;
    void unsetQuantity();

    void setQuantity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTotalPrice() const;
    bool totalPriceIsSet() const;
    void unsetTotal_price();

    void setTotalPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserInitiatedPaidQuantity() const;
    bool userInitiatedPaidQuantityIsSet() const;
    void unsetUser_initiated_paid_quantity();

    void setUserInitiatedPaidQuantity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getUserInitiatedPrice() const;
    bool userInitiatedPriceIsSet() const;
    void unsetUser_initiated_price();

    void setUserInitiatedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUserInitiatedQuantity() const;
    bool userInitiatedQuantityIsSet() const;
    void unsetUser_initiated_quantity();

    void setUserInitiatedQuantity(int32_t value);


protected:
    int32_t m_Business_initiated_paid_quantity;
    bool m_Business_initiated_paid_quantityIsSet;
    double m_Business_initiated_price;
    bool m_Business_initiated_priceIsSet;
    int32_t m_Business_initiated_quantity;
    bool m_Business_initiated_quantityIsSet;
    int32_t m_Free_entry_point;
    bool m_Free_entry_pointIsSet;
    int32_t m_Free_quantity;
    bool m_Free_quantityIsSet;
    int32_t m_Free_tier;
    bool m_Free_tierIsSet;
    int32_t m_Paid_quantity;
    bool m_Paid_quantityIsSet;
    utility::string_t m_Period_date;
    bool m_Period_dateIsSet;
    double m_Quantity;
    bool m_QuantityIsSet;
    double m_Total_price;
    bool m_Total_priceIsSet;
    int32_t m_User_initiated_paid_quantity;
    bool m_User_initiated_paid_quantityIsSet;
    double m_User_initiated_price;
    bool m_User_initiated_priceIsSet;
    int32_t m_User_initiated_quantity;
    bool m_User_initiated_quantityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChannelExtendedStatistics_inner_H_ */
