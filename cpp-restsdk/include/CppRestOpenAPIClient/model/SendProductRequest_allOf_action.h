/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SendProductRequest_allOf_action.h
 *
 * Object containing info about product or catalog. Can contain the following fields:  **catalog_id** - id of catalog  **product_retailer_id** - id of product. Only for sending single product.  **sections** - used for sending multiply products. It&#x60;s array containing objects with catalog info. See example below.  Example: {\&quot;catalog_id\&quot;:\&quot;{{catalog_id}}\&quot;,\&quot;sections\&quot;:[{\&quot;title\&quot;:\&quot;the-section-title\&quot;,\&quot;product_items\&quot;:[{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-1}}\&quot;},{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-2}}\&quot;}]},{\&quot;title\&quot;:\&quot;the-section-title2\&quot;,\&quot;product_items\&quot;:[{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-1}}\&quot;}]}]}
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SendProductRequest_allOf_action_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SendProductRequest_allOf_action_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/SendProductRequest_allOf_action_sections.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class SendProductRequest_allOf_action_sections;

/// <summary>
/// Object containing info about product or catalog. Can contain the following fields:  **catalog_id** - id of catalog  **product_retailer_id** - id of product. Only for sending single product.  **sections** - used for sending multiply products. It&#x60;s array containing objects with catalog info. See example below.  Example: {\&quot;catalog_id\&quot;:\&quot;{{catalog_id}}\&quot;,\&quot;sections\&quot;:[{\&quot;title\&quot;:\&quot;the-section-title\&quot;,\&quot;product_items\&quot;:[{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-1}}\&quot;},{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-2}}\&quot;}]},{\&quot;title\&quot;:\&quot;the-section-title2\&quot;,\&quot;product_items\&quot;:[{\&quot;product_retailer_id\&quot;:\&quot;{{SKU-1}}\&quot;}]}]}
/// </summary>
class  SendProductRequest_allOf_action
    : public ModelBase
{
public:
    SendProductRequest_allOf_action();
    virtual ~SendProductRequest_allOf_action();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendProductRequest_allOf_action members

    /// <summary>
    /// id of the catalog
    /// </summary>
    utility::string_t getCatalogId() const;
    bool catalogIdIsSet() const;
    void unsetCatalog_id();

    void setCatalogId(const utility::string_t& value);

    /// <summary>
    /// id of the product
    /// </summary>
    utility::string_t getProductRetailerId() const;
    bool productRetailerIdIsSet() const;
    void unsetProduct_retailer_id();

    void setProductRetailerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SendProductRequest_allOf_action_sections>>& getSections();
    bool sectionsIsSet() const;
    void unsetSections();

    void setSections(const std::vector<std::shared_ptr<SendProductRequest_allOf_action_sections>>& value);


protected:
    utility::string_t m_Catalog_id;
    bool m_Catalog_idIsSet;
    utility::string_t m_Product_retailer_id;
    bool m_Product_retailer_idIsSet;
    std::vector<std::shared_ptr<SendProductRequest_allOf_action_sections>> m_Sections;
    bool m_SectionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SendProductRequest_allOf_action_H_ */
