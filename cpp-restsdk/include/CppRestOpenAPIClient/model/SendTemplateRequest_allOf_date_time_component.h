/**
 * one_msg_waba_sdk
 * [1MSG.IO](https://1msg.io/) is the perfect WhatsApp management tool for your business. With us you get full access to the official Whatsapp API/webhooks.  Every API request must contain an Authorize HTTP header with a token.  This is your channel token, which can be found in your channel project on your profile page. Please do not give the token to anyone or post it publicly.  The authorization token must be added to each request in the GET parameter 'token' and always passed to query string (?token={your_token}). Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body.   All 'send' methods (except /sendTemplate) will only work when the dialog session with the user is open. Some of our solutions simplify and avoid such limitations, but we urge you to pay more attention to this detail
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: hello@1msg.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SendTemplateRequest_allOf_date_time_component.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SendTemplateRequest_allOf_date_time_component_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SendTemplateRequest_allOf_date_time_component_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SendTemplateRequest_allOf_date_time_component
    : public ModelBase
{
public:
    SendTemplateRequest_allOf_date_time_component();
    virtual ~SendTemplateRequest_allOf_date_time_component();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendTemplateRequest_allOf_date_time_component members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDayOfWeek() const;
    bool dayOfWeekIsSet() const;
    void unsetDay_of_week();

    void setDayOfWeek(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getYear() const;
    bool yearIsSet() const;
    void unsetYear();

    void setYear(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMonth() const;
    bool monthIsSet() const;
    void unsetMonth();

    void setMonth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDayOfMonth() const;
    bool dayOfMonthIsSet() const;
    void unsetDay_of_month();

    void setDayOfMonth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHour() const;
    bool hourIsSet() const;
    void unsetHour();

    void setHour(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinute() const;
    bool minuteIsSet() const;
    void unsetMinute();

    void setMinute(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCalendar() const;
    bool calendarIsSet() const;
    void unsetCalendar();

    void setCalendar(const utility::string_t& value);


protected:
    utility::string_t m_Day_of_week;
    bool m_Day_of_weekIsSet;
    int32_t m_Year;
    bool m_YearIsSet;
    int32_t m_Month;
    bool m_MonthIsSet;
    int32_t m_Day_of_month;
    bool m_Day_of_monthIsSet;
    int32_t m_Hour;
    bool m_HourIsSet;
    int32_t m_Minute;
    bool m_MinuteIsSet;
    utility::string_t m_Calendar;
    bool m_CalendarIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SendTemplateRequest_allOf_date_time_component_H_ */
